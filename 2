# دالة إضافية للتحقق من الإحصائيات وإصلاح أي مشاكل
    def _verify_course_statistics(self, course_id):
        """التحقق من إحصائيات دورة معينة وعرض التفاصيل"""
        try:
            cursor = self.db_conn.cursor()

            # الحصول على معلومات الدورة
            cursor.execute("SELECT course_code, course_name FROM courses WHERE id = ?", (course_id,))
            course_info = cursor.fetchone()

            if not course_info:
                return

            print(f"\n=== إحصائيات الدورة {course_info[0]}: {course_info[1]} ===")

            # الحصول على تفصيل الحالات
            cursor.execute("""
                SELECT 
                    participant_status, 
                    COUNT(*) as count,
                    GROUP_CONCAT(participant_name, ', ') as names
                FROM participants 
                WHERE course_id = ?
                GROUP BY participant_status
            """, (course_id,))

            status_details = cursor.fetchall()

            total = 0
            passed = 0
            not_passed = 0

            print("تفصيل الحالات:")
            for status, count, names in status_details:
                print(f"  - {status}: {count} مشارك")
                # print(f"    الأسماء: {names[:100]}..." if len(names) > 100 else f"    الأسماء: {names}")

                total += count

                # تصنيف الحالات
                if status in ['مجتاز', 'باشر']:
                    passed += count
                else:
                    not_passed += count

            print(f"\nالملخص:")
            print(f"  الإجمالي: {total}")
            print(f"  المجتازين: {passed}")
            print(f"  غير المجتازين: {not_passed}")
            print("=" * 50)

        except Exception as e:
            print(f"خطأ في التحقق من الإحصائيات: {e}")

    # دالة لإصلاح حالات المشاركين إذا لزم الأمر
    def _fix_participant_statuses(self):
        """إصلاح حالات المشاركين غير الصحيحة"""
        try:
            cursor = self.db_conn.cursor()

            # الحصول على جميع الحالات الفريدة
            cursor.execute("SELECT DISTINCT participant_status FROM participants")
            statuses = cursor.fetchall()

            print("الحالات الموجودة حالياً:")
            for status in statuses:
                if status[0]:
                    print(f"  - '{status[0]}'")

            # إصلاح الحالات الشائعة
            fixes = [
                # تصحيح الحالات المكتوبة خطأ
                (
                    "UPDATE participants SET participant_status = 'مجتاز' WHERE participant_status IN ('مجتاز ', ' مجتاز', 'ﻣﺠﺘﺎﺯ')",
                    'مجتاز'),
                (
                    "UPDATE participants SET participant_status = 'لم يباشر' WHERE participant_status IN ('لم يباشر ', ' لم يباشر', 'لم يباشر الدورة')",
                    'لم يباشر'),
                (
                    "UPDATE participants SET participant_status = 'إلغاء دورة' WHERE participant_status IN ('إلغاء دورة ', ' إلغاء دورة', 'الغاء دورة', 'إلغاء')",
                    'إلغاء دورة'),
                (
                    "UPDATE participants SET participant_status = 'مرفوض أخرى' WHERE participant_status IN ('مرفوض', 'أخرى', 'مرفوض اخرى')",
                    'مرفوض أخرى'),

                # تصحيح الحالات الفارغة أو NULL
                (
                    "UPDATE participants SET participant_status = 'غير محدد' WHERE participant_status IS NULL OR participant_status = ''",
                    'غير محدد'),
            ]

            total_fixed = 0
            for query, status_name in fixes:
                cursor.execute(query)
                fixed_count = cursor.rowcount
                if fixed_count > 0:
                    print(f"تم إصلاح {fixed_count} سجل للحالة '{status_name}'")
                    total_fixed += fixed_count

            if total_fixed > 0:
                self.db_conn.commit()
                print(f"\nإجمالي السجلات المُصلحة: {total_fixed}")
                messagebox.showinfo("نجاح", f"تم إصلاح {total_fixed} سجل بنجاح")
            else:
                print("لا توجد سجلات تحتاج إصلاح")

        except Exception as e:
            print(f"خطأ في إصلاح الحالات: {e}")
            self.db_conn.rollback()

    def _add_new_course(self):
        """إضافة دورة تدريبية جديدة"""
        add_window = tk.Toplevel(self)
        add_window.title("إضافة دورة تدريبية جديدة")
        add_window.state('zoomed')  # ملء الشاشة
        add_window.configure(bg=self.COLORS["background"])
        add_window.transient(self)
        add_window.grab_set()

        # شريط العنوان
        header = tk.Frame(add_window, bg="#1E3A5F", height=100)
        header.pack(fill=tk.X)
        header.pack_propagate(False)

        header_content = tk.Frame(header, bg="#1E3A5F")
        header_content.pack(expand=True, fill=tk.BOTH)

        tk.Label(
            header_content,
            text="إضافة دورة تدريبية جديدة",
            font=("Tajawal", 32, "bold"),
            bg="#1E3A5F",
            fg="white"
        ).pack(expand=True)

        # زر الإغلاق
        close_btn = tk.Button(
            header_content,
            text="✕ إغلاق",
            font=self.FONTS["text_bold"],
            bg="#dc3545",
            fg="white",
            padx=20,
            pady=10,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=add_window.destroy
        )
        close_btn.place(relx=0.95, rely=0.5, anchor="e")

        # إطار المحتوى الرئيسي
        main_container = tk.Frame(add_window, bg=self.COLORS["background"])
        main_container.pack(fill=tk.BOTH, expand=True, padx=50, pady=30)

        # إطار الإدخال
        input_frame = tk.Frame(main_container, bg=self.COLORS["card"], padx=40, pady=30)
        input_frame.pack(fill=tk.BOTH, expand=True)

        # تنظيم الحقول في صفين
        left_frame = tk.Frame(input_frame, bg=self.COLORS["card"])
        left_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 20))

        right_frame = tk.Frame(input_frame, bg=self.COLORS["card"])
        right_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=(20, 0))

        # === الجانب الأيسر ===

        # 1. اسم الدورة
        tk.Label(
            left_frame,
            text="اسم الدورة:",
            font=self.FONTS["text_bold"],
            bg=self.COLORS["card"],
            fg=self.COLORS["on_surface"]
        ).pack(anchor="w", pady=(0, 5))

        course_name_entry = tk.Entry(
            left_frame,
            font=self.FONTS["body"],
            bd=1,
            relief=tk.SOLID,
            bg="white"
        )
        course_name_entry.pack(fill=tk.X, pady=(0, 20), ipady=8)

        # 2. رقم الدورة
        tk.Label(
            left_frame,
            text="رقم الدورة:",
            font=self.FONTS["text_bold"],
            bg=self.COLORS["card"],
            fg=self.COLORS["on_surface"]
        ).pack(anchor="w", pady=(0, 5))

        course_code_entry = tk.Entry(
            left_frame,
            font=self.FONTS["body"],
            bd=1,
            relief=tk.SOLID,
            bg="white"
        )
        course_code_entry.pack(fill=tk.X, pady=(0, 20), ipady=8)

        # السماح بالأرقام فقط
        def validate_number(char):
            return char.isdigit() or char == ""

        vcmd = (add_window.register(validate_number), '%P')
        course_code_entry.config(validate='key', validatecommand=vcmd)

        # 3. فئة الدورة
        tk.Label(
            left_frame,
            text="فئة الدورة:",
            font=self.FONTS["text_bold"],
            bg=self.COLORS["card"],
            fg=self.COLORS["on_surface"]
        ).pack(anchor="w", pady=(0, 5))

        categories = ["ضباط", "أفراد", "مشتركة", "مدنيين", "طالب عسكري"]
        category_var = tk.StringVar(add_window)
        category_combo = ttk.Combobox(
            left_frame,
            textvariable=category_var,
            values=categories,
            font=self.FONTS["body"],
            state="readonly"
        )
        category_combo.pack(fill=tk.X, pady=(0, 20), ipady=5)
        category_combo.current(0)

        # 4. تاريخ بداية الدورة
        tk.Label(
            left_frame,
            text="تاريخ بداية الدورة:",
            font=self.FONTS["text_bold"],
            bg=self.COLORS["card"],
            fg=self.COLORS["on_surface"]
        ).pack(anchor="w", pady=(0, 5))

        # استخدام DateEntry إذا كان متاحاً، وإلا استخدام Entry عادي
        try:
            from tkcalendar import DateEntry
            start_date_entry = DateEntry(
                left_frame,
                font=self.FONTS["body"],
                date_pattern='yyyy-mm-dd',
                width=20,
                background=self.COLORS["primary"],
                foreground='white',
                borderwidth=2
            )
            start_date_entry.pack(fill=tk.X, pady=(0, 20), ipady=5)
        except ImportError:
            start_date_frame = tk.Frame(left_frame, bg=self.COLORS["card"])
            start_date_frame.pack(fill=tk.X, pady=(0, 20))

            start_date_entry = tk.Entry(
                start_date_frame,
                font=self.FONTS["body"],
                bd=1,
                relief=tk.SOLID,
                bg="white"
            )
            start_date_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, ipady=8)
            start_date_entry.insert(0, datetime.datetime.now().strftime("%Y-%m-%d"))

            tk.Label(
                start_date_frame,
                text="(YYYY-MM-DD)",
                font=self.FONTS["small"],
                bg=self.COLORS["card"],
                fg="#666"
            ).pack(side=tk.RIGHT, padx=(10, 0))

        # === الجانب الأيمن ===

        # 5. تاريخ نهاية الدورة
        tk.Label(
            right_frame,
            text="تاريخ نهاية الدورة:",
            font=self.FONTS["text_bold"],
            bg=self.COLORS["card"],
            fg=self.COLORS["on_surface"]
        ).pack(anchor="w", pady=(0, 5))

        try:
            from tkcalendar import DateEntry
            end_date_entry = DateEntry(
                right_frame,
                font=self.FONTS["body"],
                date_pattern='yyyy-mm-dd',
                width=20,
                background=self.COLORS["primary"],
                foreground='white',
                borderwidth=2
            )
            end_date_entry.pack(fill=tk.X, pady=(0, 20), ipady=5)
        except ImportError:
            end_date_frame = tk.Frame(right_frame, bg=self.COLORS["card"])
            end_date_frame.pack(fill=tk.X, pady=(0, 20))

            end_date_entry = tk.Entry(
                end_date_frame,
                font=self.FONTS["body"],
                bd=1,
                relief=tk.SOLID,
                bg="white"
            )
            end_date_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, ipady=8)
            end_date_entry.insert(0, datetime.datetime.now().strftime("%Y-%m-%d"))

            tk.Label(
                end_date_frame,
                text="(YYYY-MM-DD)",
                font=self.FONTS["small"],
                bg=self.COLORS["card"],
                fg="#666"
            ).pack(side=tk.RIGHT, padx=(10, 0))

        # 6. الجنس
        tk.Label(
            right_frame,
            text="الجنس:",
            font=self.FONTS["text_bold"],
            bg=self.COLORS["card"],
            fg=self.COLORS["on_surface"]
        ).pack(anchor="w", pady=(0, 5))

        gender_frame = tk.Frame(right_frame, bg=self.COLORS["card"])
        gender_frame.pack(fill=tk.X, pady=(0, 20))

        gender_var = tk.StringVar(add_window, value="ذكر")

        male_radio = tk.Radiobutton(
            gender_frame,
            text="ذكر",
            variable=gender_var,
            value="ذكر",
            font=self.FONTS["text"],
            bg=self.COLORS["card"]
        )
        male_radio.pack(side=tk.LEFT, padx=(0, 30))

        female_radio = tk.Radiobutton(
            gender_frame,
            text="أنثى",
            variable=gender_var,
            value="أنثى",
            font=self.FONTS["text"],
            bg=self.COLORS["card"]
        )
        female_radio.pack(side=tk.LEFT)

        # 7. اشتراطات الدورة
        tk.Label(
            right_frame,
            text="اشتراطات الدورة:",
            font=self.FONTS["text_bold"],
            bg=self.COLORS["card"],
            fg=self.COLORS["on_surface"]
        ).pack(anchor="w", pady=(0, 5))

        requirements_frame = tk.Frame(right_frame, bg=self.COLORS["card"])
        requirements_frame.pack(fill=tk.X, pady=(0, 20))

        requirements_var = tk.StringVar(add_window, value="تفرغ")

        fulltime_radio = tk.Radiobutton(
            requirements_frame,
            text="تفرغ",
            variable=requirements_var,
            value="تفرغ",
            font=self.FONTS["text"],
            bg=self.COLORS["card"]
        )
        fulltime_radio.pack(side=tk.LEFT, padx=(0, 30))

        parttime_radio = tk.Radiobutton(
            requirements_frame,
            text="بدون تفرغ",
            variable=requirements_var,
            value="بدون تفرغ",
            font=self.FONTS["text"],
            bg=self.COLORS["card"]
        )
        parttime_radio.pack(side=tk.LEFT)

        # الأزرار
        buttons_frame = tk.Frame(main_container, bg=self.COLORS["background"], pady=20)
        buttons_frame.pack(fill=tk.X)

        def save_course():
            # جمع البيانات
            name = course_name_entry.get().strip()
            code = course_code_entry.get().strip()
            category = category_var.get()
            gender = gender_var.get()
            requirements = requirements_var.get()

            # الحصول على التواريخ
            try:
                # محاولة الحصول من DateEntry
                start_date = start_date_entry.get_date().strftime("%Y-%m-%d")
                end_date = end_date_entry.get_date().strftime("%Y-%m-%d")
            except:
                # إذا فشل، الحصول من Entry العادي
                start_date = start_date_entry.get().strip()
                end_date = end_date_entry.get().strip()

            # التحقق من البيانات
            if not name or not code:
                messagebox.showwarning("تنبيه", "الرجاء ملء اسم الدورة ورقمها")
                return

            # التحقق من عدم تكرار رقم الدورة
            cursor = self.db_conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM courses WHERE course_code=?", (code,))
            if cursor.fetchone()[0] > 0:
                messagebox.showwarning("تنبيه", "رقم الدورة موجود مسبقاً")
                return

            # التحقق من التواريخ
            try:
                start_dt = datetime.datetime.strptime(start_date, "%Y-%m-%d")
                end_dt = datetime.datetime.strptime(end_date, "%Y-%m-%d")

                if end_dt < start_dt:
                    messagebox.showwarning("تنبيه", "تاريخ النهاية يجب أن يكون بعد تاريخ البداية")
                    return
            except ValueError:
                messagebox.showwarning("تنبيه", "صيغة التاريخ غير صحيحة")
                return

            # حفظ الدورة
            try:
                with self.db_conn:
                    self.db_conn.execute("""
                        INSERT INTO courses (
                            course_code, course_name, course_category, start_date, 
                            end_date, gender, requirements, status, created_date, created_by
                        ) VALUES (?, ?, ?, ?, ?, ?, ?, 'جارية', ?, ?)
                    """, (
                        code, name, category, start_date, end_date, gender, requirements,
                        datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                        self.current_user["full_name"] if self.current_user else "النظام"
                    ))

                messagebox.showinfo("نجاح", "تم إضافة الدورة بنجاح")
                self._load_courses()
                add_window.destroy()

            except Exception as e:
                messagebox.showerror("خطأ", f"حدث خطأ: {str(e)}")

        save_btn = tk.Button(
            buttons_frame,
            text="حفظ الدورة",
            font=("Tajawal", 16, "bold"),
            bg=self.COLORS["success"],
            fg="white",
            padx=40,
            pady=15,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=save_course
        )
        save_btn.pack(side=tk.LEFT, padx=10)

        cancel_btn = tk.Button(
            buttons_frame,
            text="إلغاء",
            font=("Tajawal", 16, "bold"),
            bg=self.COLORS["danger"],
            fg="white",
            padx=40,
            pady=15,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=add_window.destroy
        )
        cancel_btn.pack(side=tk.RIGHT, padx=10)

    def _edit_course(self):
        """تعديل الدورة المحددة"""
        selected = self.courses_tree.selection()
        if not selected:
            messagebox.showwarning("تنبيه", "الرجاء اختيار دورة للتعديل")
            return

        # TODO: تنفيذ تعديل الدورة
        messagebox.showinfo("قيد التطوير", "وظيفة تعديل الدورة قيد التطوير")

    def _delete_course(self):
        """حذف الدورة المحددة"""
        selected = self.courses_tree.selection()
        if not selected:
            messagebox.showwarning("تنبيه", "الرجاء اختيار دورة للحذف")
            return

        item = self.courses_tree.item(selected[0])
        course_data = item["values"]
        course_code = course_data[0]
        course_name = course_data[1]

        if messagebox.askyesno("تأكيد الحذف", f"هل تريد حذف الدورة '{course_name}'؟"):
            try:
                cursor = self.db_conn.cursor()
                cursor.execute("SELECT id FROM courses WHERE course_code=?", (course_code,))
                result = cursor.fetchone()
                if result:
                    course_id = result[0]

                    with self.db_conn:
                        # حذف المشاركين أولاً
                        self.db_conn.execute("DELETE FROM participants WHERE course_id=?", (course_id,))
                        # حذف الدورة
                        self.db_conn.execute("DELETE FROM courses WHERE id=?", (course_id,))

                    messagebox.showinfo("نجاح", "تم حذف الدورة بنجاح")
                    self._load_courses()

            except Exception as e:
                messagebox.showerror("خطأ", f"حدث خطأ: {str(e)}")

    def _on_course_double_click(self, event):
        """عند النقر المزدوج على دورة"""
        selected = self.courses_tree.selection()
        if not selected:
            return

        item = self.courses_tree.item(selected[0])
        course_data = item["values"]
        course_code = course_data[0]
        course_name = course_data[1]

        # فتح نافذة تفاصيل الدورة
        self._show_course_details(course_code, course_name)

    def _show_course_details(self, course_code, course_name):
        """عرض تفاصيل الدورة بتصميم رسمي محسن"""
        details_window = tk.Toplevel(self)
        details_window.title(f"تفاصيل الدورة: {course_name}")
        details_window.state('zoomed')
        details_window.configure(bg="#F5F5F5")
        details_window.transient(self)
        details_window.grab_set()

        # متغيرات الفهرسة والبحث
        participants_per_page = 100
        current_page = 1
        total_pages = 1
        search_text = ""

        # الحصول على معلومات الدورة
        cursor = self.db_conn.cursor()
        cursor.execute("""
            SELECT id, course_name, course_code, course_category, 
                   start_date, end_date, gender, requirements, location, 
                   trainer, total_participants, status
            FROM courses 
            WHERE course_code=?
        """, (course_code,))
        course_info = cursor.fetchone()

        if course_info:
            course_id = course_info[0]
            course_category = course_info[3] if course_info[3] else "غير محدد"

            # الإحصائيات
            cursor.execute("""
                SELECT 
                    COUNT(*) as total,
                    SUM(CASE WHEN participant_status IN ('مجتاز', 'باشر') THEN 1 ELSE 0 END) as passed,
                    SUM(CASE WHEN participant_status = 'إلغاء دورة' THEN 1 ELSE 0 END) as cancelled,
                    SUM(CASE WHEN participant_status = 'لم يباشر' THEN 1 ELSE 0 END) as not_started
                FROM participants 
                WHERE course_id=?
            """, (course_id,))

            stats = cursor.fetchone()

        # ================== الشريط العلوي بتصميم رسمي ==================
        header = tk.Frame(details_window, bg="#2c3e50", height=100)
        header.pack(fill=tk.X)
        header.pack_propagate(False)

        header_content = tk.Frame(header, bg="#2c3e50")
        header_content.pack(expand=True, fill=tk.BOTH)

        # معلومات الدورة في المنتصف
        title_frame = tk.Frame(header_content, bg="#2c3e50")
        title_frame.pack(expand=True)

        tk.Label(
            title_frame,
            text=f"{course_name}",
            font=("Tajawal", 24, "bold"),
            bg="#2c3e50",
            fg="white"
        ).pack()

        tk.Label(
            title_frame,
            text=f"رقم الدورة: {course_code}  |  الفئة: {course_category}",
            font=("Tajawal", 14),
            bg="#2c3e50",
            fg="#ecf0f1"
        ).pack(pady=(5, 0))

        # زر الإغلاق
        close_btn = tk.Button(
            header_content,
            text="✕ إغلاق",
            font=("Tajawal", 12, "bold"),
            bg="#c0392b",
            fg="white",
            padx=20,
            pady=8,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=details_window.destroy
        )
        close_btn.place(relx=0.95, rely=0.5, anchor="e")

        # ================== منطقة المحتوى الرئيسية ==================
        main_content = tk.Frame(details_window, bg="#F5F5F5")
        main_content.pack(fill=tk.BOTH, expand=True, padx=15, pady=10)

        # إطار الأزرار الرئيسية
        buttons_frame = tk.Frame(main_content, bg="#F5F5F5")
        buttons_frame.pack(fill=tk.X, pady=(0, 10))

        # زر تعديل حالة المشاركين
        edit_status_btn = tk.Button(
            buttons_frame,
            text="✏️ تعديل حالة المشاركين",
            font=("Tajawal", 12, "bold"),
            bg="#34495e",
            fg="white",
            padx=25,
            pady=10,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=lambda: self._edit_participant_status(course_id, course_name, details_window)
        )
        edit_status_btn.pack(side=tk.LEFT, padx=5)

        # زر الاستيراد
        import_btn = tk.Button(
            buttons_frame,
            text="📥 استيراد من Excel",
            font=("Tajawal", 12, "bold"),
            bg="#34495e",
            fg="white",
            padx=25,
            pady=10,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=lambda: self._import_participants_for_course(course_id, course_name)
        )
        import_btn.pack(side=tk.LEFT, padx=5)

        # ================== إطار الإحصائيات والبحث ==================
        stats_search_frame = tk.Frame(main_content, bg="white", relief=tk.RAISED, bd=1)
        stats_search_frame.pack(fill=tk.X, pady=(0, 10))

        # قسم الإحصائيات
        stats_section = tk.Frame(stats_search_frame, bg="white", pady=15)
        stats_section.pack(fill=tk.X)

        # البطاقات الإحصائية
        cards_container = tk.Frame(stats_section, bg="white")
        cards_container.pack()

        # بطاقة إجمالي المشاركين
        total_card = tk.Frame(cards_container, bg="#ecf0f1", relief=tk.FLAT, bd=1, width=150, height=80)
        total_card.pack(side=tk.LEFT, padx=10)
        total_card.pack_propagate(False)

        tk.Label(
            total_card,
            text="إجمالي المشاركين",
            font=("Tajawal", 11),
            bg="#ecf0f1",
            fg="#2c3e50"
        ).pack(pady=(10, 5))

        tk.Label(
            total_card,
            text=str(stats[0] if stats[0] else 0),
            font=("Tajawal", 24, "bold"),
            bg="#ecf0f1",
            fg="#34495e"
        ).pack()

        # بطاقة المجتازين
        passed_card = tk.Frame(cards_container, bg="#d5f4e6", relief=tk.FLAT, bd=1, width=150, height=80)
        passed_card.pack(side=tk.LEFT, padx=10)
        passed_card.pack_propagate(False)

        tk.Label(
            passed_card,
            text="مجتاز",
            font=("Tajawal", 11),
            bg="#d5f4e6",
            fg="#27ae60"
        ).pack(pady=(10, 5))

        tk.Label(
            passed_card,
            text=str(stats[1] if stats[1] else 0),
            font=("Tajawal", 24, "bold"),
            bg="#d5f4e6",
            fg="#229954"
        ).pack()

        # بطاقة إلغاء دورة
        cancelled_card = tk.Frame(cards_container, bg="#fadbd8", relief=tk.FLAT, bd=1, width=150, height=80)
        cancelled_card.pack(side=tk.LEFT, padx=10)
        cancelled_card.pack_propagate(False)

        tk.Label(
            cancelled_card,
            text="إلغاء دورة",
            font=("Tajawal", 11),
            bg="#fadbd8",
            fg="#e74c3c"
        ).pack(pady=(10, 5))

        tk.Label(
            cancelled_card,
            text=str(stats[2] if stats[2] else 0),
            font=("Tajawal", 24, "bold"),
            bg="#fadbd8",
            fg="#c0392b"
        ).pack()

        # بطاقة لم يباشر
        not_started_card = tk.Frame(cards_container, bg="#fdebd0", relief=tk.FLAT, bd=1, width=150, height=80)
        not_started_card.pack(side=tk.LEFT, padx=10)
        not_started_card.pack_propagate(False)

        tk.Label(
            not_started_card,
            text="لم يباشر",
            font=("Tajawal", 11),
            bg="#fdebd0",
            fg="#e67e22"
        ).pack(pady=(10, 5))

        tk.Label(
            not_started_card,
            text=str(stats[3] if stats[3] else 0),
            font=("Tajawal", 24, "bold"),
            bg="#fdebd0",
            fg="#d35400"
        ).pack()

        # خط فاصل
        separator = tk.Frame(stats_search_frame, bg="#E0E0E0", height=1)
        separator.pack(fill=tk.X, padx=30, pady=5)

        # قسم البحث
        search_section = tk.Frame(stats_search_frame, bg="white", padx=30, pady=10)
        search_section.pack(fill=tk.X)

        search_row = tk.Frame(search_section, bg="white")
        search_row.pack()

        tk.Label(
            search_row,
            text="🔍 البحث في المشاركين:",
            font=("Tajawal", 13, "bold"),
            bg="white",
            fg="#2c3e50"
        ).pack(side=tk.LEFT, padx=(0, 10))

        search_entry = tk.Entry(
            search_row,
            font=("Tajawal", 12),
            width=35,
            bd=2,
            relief=tk.GROOVE
        )
        search_entry.pack(side=tk.LEFT, padx=(0, 10))

        def search_participants():
            nonlocal search_text, current_page
            search_text = search_entry.get().strip()
            current_page = 1
            refresh_participants()

        search_btn = tk.Button(
            search_row,
            text="بحث",
            font=("Tajawal", 11, "bold"),
            bg="#3498db",
            fg="white",
            padx=25,
            pady=6,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=search_participants
        )
        search_btn.pack(side=tk.LEFT, padx=5)

        clear_btn = tk.Button(
            search_row,
            text="إظهار الكل",
            font=("Tajawal", 11, "bold"),
            bg="#7f8c8d",
            fg="white",
            padx=25,
            pady=6,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=lambda: clear_search()
        )
        clear_btn.pack(side=tk.LEFT, padx=5)

        # عداد النتائج
        results_label = tk.Label(
            search_row,
            text="",
            font=("Tajawal", 11, "bold"),
            bg="white",
            fg="#27ae60"
        )
        results_label.pack(side=tk.LEFT, padx=20)

        def clear_search():
            search_entry.delete(0, tk.END)
            nonlocal search_text, current_page
            search_text = ""
            current_page = 1
            refresh_participants()

        search_entry.bind('<Return>', lambda e: search_participants())

        # ================== جدول المشاركين مع ارتفاع محدد ==================
        table_main_frame = tk.Frame(main_content, bg="white", relief=tk.RAISED, bd=1, height=400)
        table_main_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 5))
        table_main_frame.pack_propagate(False)  # منع تغيير الحجم تلقائياً

        # شريط عنوان الجدول
        table_header = tk.Frame(table_main_frame, bg="#34495e", height=40)
        table_header.pack(fill=tk.X)
        table_header.pack_propagate(False)

        table_title_label = tk.Label(
            table_header,
            text="قائمة المشاركين",
            font=("Tajawal", 13, "bold"),
            bg="#34495e",
            fg="white"
        )
        table_title_label.pack(expand=True)

        # إطار الجدول
        table_container = tk.Frame(table_main_frame, bg="white")
        table_container.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        columns = ("الإسم", "الرتبة", "الهوية", "الجهة", "الحالة", "السبب")

        participants_tree = ttk.Treeview(table_container, columns=columns, show="headings", height=10)

        participants_tree.column("الإسم", width=220, anchor="center")
        participants_tree.column("الرتبة", width=100, anchor="center")
        participants_tree.column("الهوية", width=130, anchor="center")
        participants_tree.column("الجهة", width=200, anchor="center")
        participants_tree.column("الحالة", width=110, anchor="center")
        participants_tree.column("السبب", width=280, anchor="center")

        style = ttk.Style()
        style.configure("Treeview.Heading", font=("Tajawal", 12, "bold"))
        style.configure("Treeview", font=("Tajawal", 11), rowheight=28)

        for col in columns:
            participants_tree.heading(col, text=col)

        scrollbar = ttk.Scrollbar(table_container, orient="vertical", command=participants_tree.yview)
        participants_tree.configure(yscrollcommand=scrollbar.set)

        participants_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        participants_tree.tag_configure("passed", background="#d5f4e6")
        participants_tree.tag_configure("cancelled", background="#fadbd8")
        participants_tree.tag_configure("not_started", background="#fdebd0")

        # ================== أزرار التنقل في الأسفل ==================
        nav_frame = tk.Frame(table_main_frame, bg="#ecf0f1", height=45)
        nav_frame.pack(fill=tk.X, side=tk.BOTTOM)
        nav_frame.pack_propagate(False)

        nav_content = tk.Frame(nav_frame, bg="#ecf0f1")
        nav_content.pack(expand=True, pady=8)

        prev_btn = tk.Button(
            nav_content,
            text="◀ السابق",
            font=("Tajawal", 11, "bold"),
            bg="#34495e",
            fg="white",
            padx=20,
            pady=5,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            state=tk.DISABLED,
            command=lambda: navigate_page(-1)
        )
        prev_btn.pack(side=tk.LEFT, padx=10)

        page_label = tk.Label(
            nav_content,
            text="الصفحة 1 من 1",
            font=("Tajawal", 12, "bold"),
            bg="#ecf0f1",
            fg="#2c3e50"
        )
        page_label.pack(side=tk.LEFT, padx=20)

        next_btn = tk.Button(
            nav_content,
            text="التالي ▶",
            font=("Tajawal", 11, "bold"),
            bg="#34495e",
            fg="white",
            padx=20,
            pady=5,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=lambda: navigate_page(1)
        )
        next_btn.pack(side=tk.LEFT, padx=10)

        # معلومات العدد
        count_label = tk.Label(
            nav_content,
            text="",
            font=("Tajawal", 10),
            bg="#ecf0f1",
            fg="#7f8c8d"
        )
        count_label.pack(side=tk.RIGHT, padx=20)

        def navigate_page(direction):
            nonlocal current_page
            new_page = current_page + direction
            if 1 <= new_page <= total_pages:
                current_page = new_page
                refresh_participants()

        def refresh_participants():
            nonlocal total_pages

            # مسح الجدول
            for item in participants_tree.get_children():
                participants_tree.delete(item)

            # حساب العدد الإجمالي
            if search_text:
                cursor.execute("""
                    SELECT COUNT(*) FROM participants 
                    WHERE course_id = ? AND (
                        participant_name LIKE ? OR 
                        national_id LIKE ? OR
                        department LIKE ?
                    )
                """, (course_id, f"%{search_text}%", f"%{search_text}%", f"%{search_text}%"))
            else:
                cursor.execute("""
                    SELECT COUNT(*) FROM participants 
                    WHERE course_id = ?
                """, (course_id,))

            total_participants = cursor.fetchone()[0]
            total_pages = max(1, (total_participants + participants_per_page - 1) // participants_per_page)

            offset = (current_page - 1) * participants_per_page

            # جلب البيانات للصفحة الحالية
            if search_text:
                cursor.execute("""
                    SELECT participant_name, rank, national_id, department,
                           participant_status, cancellation_reason
                    FROM participants 
                    WHERE course_id = ? AND (
                        participant_name LIKE ? OR 
                        national_id LIKE ? OR
                        department LIKE ?
                    )
                    ORDER BY participant_name
                    LIMIT ? OFFSET ?
                """, (course_id, f"%{search_text}%", f"%{search_text}%", f"%{search_text}%",
                      participants_per_page, offset))
            else:
                cursor.execute("""
                    SELECT participant_name, rank, national_id, department,
                           participant_status, cancellation_reason
                    FROM participants 
                    WHERE course_id = ?
                    ORDER BY participant_name
                    LIMIT ? OFFSET ?
                """, (course_id, participants_per_page, offset))

            participants = cursor.fetchall()

            if not participants and search_text:
                participants_tree.insert("", tk.END, values=(
                    f"لا توجد نتائج للبحث: {search_text}", "", "", "", "", ""
                ))
                results_label.config(text="النتائج: 0", fg="#e74c3c")
            else:
                for row in participants:
                    tag = ""
                    if row[4] in ["مجتاز", "باشر"]:
                        tag = "passed"
                    elif row[4] == "إلغاء دورة":
                        tag = "cancelled"
                    elif row[4] == "لم يباشر":
                        tag = "not_started"

                    participants_tree.insert("", tk.END, values=row, tags=(tag,))

                if search_text:
                    results_label.config(text=f"النتائج: {total_participants}", fg="#27ae60")
                else:
                    results_label.config(text="")

            # تحديث معلومات الصفحة
            page_label.config(text=f"الصفحة {current_page} من {total_pages}")

            # تحديث معلومات العدد
            start_num = offset + 1 if total_participants > 0 else 0
            end_num = min(offset + participants_per_page, total_participants)
            count_label.config(text=f"عرض {start_num}-{end_num} من {total_participants}")

            if search_text:
                table_title_label.config(text=f"نتائج البحث ({total_participants} مشارك)")
            else:
                table_title_label.config(text=f"قائمة المشاركين ({total_participants})")

            # تحديث حالة الأزرار
            prev_btn.config(state=tk.NORMAL if current_page > 1 else tk.DISABLED)
            next_btn.config(state=tk.NORMAL if current_page < total_pages else tk.DISABLED)

        # تحميل المشاركين عند البدء
        refresh_participants()

    def _create_footer(self):
        """شريط سفلي بنفس تصميم البرنامج الأصلي"""
        footer = tk.Frame(self, bg="#2c3e50", height=50)
        footer.pack(side=tk.BOTTOM, fill=tk.X)
        footer.pack_propagate(False)

        # الجانب الأيسر - معلومات المستخدم
        left_frame = tk.Frame(footer, bg="#2c3e50")
        left_frame.pack(side=tk.LEFT, padx=20, pady=8)

        user_icon = tk.Label(
            left_frame,
            text="👤",
            font=("Arial", 16),
            bg="#2c3e50",
            fg="white"
        )
        user_icon.pack(side=tk.LEFT, padx=(0, 10))

        user_name = tk.Label(
            left_frame,
            text=f"المستخدم: {self.current_user['full_name']}" if self.current_user else "غير معرف",
            font=self.FONTS["text_bold"],
            bg="#2c3e50",
            fg="white"
        )
        user_name.pack(side=tk.LEFT)

        # الوسط - اسم النظام
        center_frame = tk.Frame(footer, bg="#2c3e50")
        center_frame.pack(side=tk.LEFT, expand=True, padx=20)

        status_text = tk.Label(
            center_frame,
            text="نظام إحصائيات الدورات",
            font=self.FONTS["title"],
            bg="#2c3e50",
            fg="white"
        )
        status_text.pack(side=tk.LEFT)

        # الجانب الأيمن - زر الخروج
        right_frame = tk.Frame(footer, bg="#2c3e50")
        right_frame.pack(side=tk.RIGHT, padx=20, pady=8)

        logout_btn = tk.Button(
            right_frame,
            text="⚡ تسجيل الخروج",
            font=self.FONTS["text_bold"],
            bg="#e74c3c",
            fg="white",
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            padx=20,
            pady=8,
            command=self._logout
        )
        logout_btn.pack(side=tk.RIGHT)

        # تأثير hover
        def on_enter(e):
            logout_btn['bg'] = '#c0392b'

        def on_leave(e):
            logout_btn['bg'] = '#e74c3c'

        logout_btn.bind("<Enter>", on_enter)
        logout_btn.bind("<Leave>", on_leave)

    def _on_closing(self):
        """معالجة إغلاق النافذة"""
        if messagebox.askokcancel("إغلاق", "هل تريد إغلاق البرنامج؟"):
            try:
                if hasattr(self, 'db_conn') and self.db_conn:
                    self.db_conn.close()
            except:
                pass
            finally:
                self.quit()
                self.destroy()
                import sys
                sys.exit(0)

    def _open_audit_validation(self):
        """فتح صفحة التدقيق والمصادقة مع التبويبات الثلاثة"""

        # إنشاء النافذة
        audit_window = tk.Toplevel(self)
        audit_window.title("التدقيق والمصادقة")
        audit_window.state('zoomed')
        audit_window.configure(bg="#f0f2f5")
        audit_window.transient(self)
        audit_window.grab_set()

        # ================== الشريط العلوي (ثابت) ==================
        header = tk.Frame(audit_window, bg="#1a237e", height=100)
        header.pack(fill=tk.X)
        header.pack_propagate(False)

        # شعار أو أيقونة
        logo_frame = tk.Frame(header, bg="#1a237e")
        logo_frame.pack(side=tk.RIGHT, padx=30, pady=20)

        tk.Label(
            logo_frame,
            text="📊",
            font=("Arial", 36),
            bg="#1a237e",
            fg="white"
        ).pack()

        # معلومات الرأس
        header_info = tk.Frame(header, bg="#1a237e")
        header_info.pack(side=tk.RIGHT, padx=20, pady=25)

        tk.Label(
            header_info,
            text="نظام التدقيق والمصادقة المتكامل",
            font=("Tajawal", 24, "bold"),
            bg="#1a237e",
            fg="white"
        ).pack(anchor="w")

        tk.Label(
            header_info,
            text="مطابقة الأعداد • التحقق من الدورات • مصادقة المتدربين",
            font=("Tajawal", 12),
            bg="#1a237e",
            fg="#b3b9ff"
        ).pack(anchor="w")

        # زر الإغلاق الدائري
        close_frame = tk.Frame(header, bg="#1a237e")
        close_frame.pack(side=tk.LEFT, padx=20)

        close_btn = tk.Button(
            close_frame,
            text="✕",
            font=("Arial", 18),
            bg="#ff5252",
            fg="white",
            width=3,
            height=1,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=audit_window.destroy
        )
        close_btn.pack(pady=25)

        # ================== إطار التمرير الرئيسي ==================
        from tkinter import ttk

        main_canvas = tk.Canvas(audit_window, bg="#f0f2f5", highlightthickness=0)
        main_scrollbar_y = ttk.Scrollbar(audit_window, orient="vertical", command=main_canvas.yview)

        scrollable_frame = tk.Frame(main_canvas, bg="#f0f2f5")

        scrollable_frame.bind(
            "<Configure>",
            lambda e: main_canvas.configure(scrollregion=main_canvas.bbox("all"))
        )

        main_canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        main_canvas.configure(yscrollcommand=main_scrollbar_y.set)

        def on_mousewheel(event):
            try:
                widget = event.widget
                if widget and hasattr(widget, 'winfo_exists') and widget.winfo_exists():
                    if isinstance(widget, tk.Canvas) or widget.winfo_class() == 'Canvas':
                        widget.yview_scroll(int(-1 * (event.delta / 120)), "units")
            except:
                pass

        audit_window.bind_all("<MouseWheel>", on_mousewheel)

        # ================== المحتوى الرئيسي ==================
        main_container = tk.Frame(scrollable_frame, bg="#f0f2f5")
        main_container.pack(fill=tk.BOTH, expand=True, padx=30, pady=20)

        # ================== إنشاء تبويبات رئيسية ==================
        main_tab_control = ttk.Notebook(main_container)
        main_tab_control.pack(fill=tk.BOTH, expand=True)

        style = ttk.Style()
        style.theme_use('clam')

        # تخصيص ألوان التبويبات
        style.configure('TNotebook', background='#f0f2f5', borderwidth=0)
        style.configure('TNotebook.Tab',
                        padding=[30, 15],
                        font=('Tajawal', 12, 'bold'),
                        background='#e8eaf6',
                        foreground='#5f6368',
                        borderwidth=0)
        style.map('TNotebook.Tab',
                  background=[('selected', '#1a237e')],
                  foreground=[('selected', 'white')],
                  expand=[('selected', [1, 1, 1, 0])])

        # ================== التبويب الأول: مطابقة أعداد المجتازين ==================
        numbers_tab = tk.Frame(main_tab_control, bg="#f0f2f5")
        main_tab_control.add(numbers_tab, text="📊 مطابقة أعداد المجتازين")

        # متغيرات لتخزين البيانات
        imported_data = []
        comparison_results = []
        missing_in_excel = []

        # بطاقة الاستيراد
        import_card = tk.Frame(numbers_tab, bg="white", relief=tk.FLAT, bd=0)
        import_card.pack(fill=tk.X, pady=15, padx=20)

        # إضافة ظل للبطاقة
        shadow_frame = tk.Frame(import_card, bg="#e0e0e0", height=2)
        shadow_frame.pack(side=tk.BOTTOM, fill=tk.X)

        import_content = tk.Frame(import_card, bg="white", padx=40, pady=30)
        import_content.pack(fill=tk.BOTH)

        # رأس البطاقة مع أيقونة
        card_header = tk.Frame(import_content, bg="white")
        card_header.pack(fill=tk.X, pady=(0, 20))

        tk.Label(
            card_header,
            text="📁",
            font=("Arial", 28),
            bg="white",
            fg="#1a237e"
        ).pack(side=tk.RIGHT, padx=10)

        header_text = tk.Frame(card_header, bg="white")
        header_text.pack(side=tk.RIGHT)

        tk.Label(
            header_text,
            text="استيراد ملف Excel للمطابقة",
            font=("Tajawal", 18, "bold"),
            bg="white",
            fg="#1a237e"
        ).pack(anchor="w")

        tk.Label(
            header_text,
            text="قم برفع ملف يحتوي على رقم الدورة وعدد المجتازين",
            font=("Tajawal", 11),
            bg="white",
            fg="#757575"
        ).pack(anchor="w")

        # خط فاصل
        separator = tk.Frame(import_content, bg="#e0e0e0", height=1)
        separator.pack(fill=tk.X, pady=15)

        # منطقة السحب والإفلات (تصميم محسن)
        drop_zone = tk.Frame(import_content, bg="#fafafa", relief=tk.FLAT, bd=1)
        drop_zone.pack(fill=tk.X, pady=10)

        # إطار منقط
        dashed_border = tk.Frame(drop_zone, bg="white", relief=tk.FLAT)
        dashed_border.pack(fill=tk.BOTH, padx=2, pady=2)

        tk.Label(
            dashed_border,
            text="📤",
            font=("Arial", 32),
            bg="white",
            fg="#9e9e9e"
        ).pack(pady=(20, 10))

        tk.Label(
            dashed_border,
            text="اسحب الملف هنا أو انقر للاستعراض",
            font=("Tajawal", 12),
            bg="white",
            fg="#757575"
        ).pack(pady=(0, 20))

        # إطار الأزرار
        buttons_frame = tk.Frame(import_content, bg="white")
        buttons_frame.pack(pady=20)

        # ================== دالة تحميل القالب ==================
        def download_template():
            """تحميل قالب Excel للمطابقة"""
            try:
                import pandas as pd
                from tkinter import filedialog

                file_path = filedialog.asksaveasfilename(
                    defaultextension=".xlsx",
                    filetypes=[("Excel files", "*.xlsx")],
                    initialfile="قالب_التدقيق.xlsx"
                )

                if not file_path:
                    return

                # إنشاء قالب مع عمودين
                template_data = {
                    'رقم الدورة': ['101', '102', '103', '104', '105'],
                    'عدد المجتازين': [25, 30, 18, 22, 35]
                }

                df = pd.DataFrame(template_data)

                # حفظ مع التنسيق من اليمين لليسار
                with pd.ExcelWriter(file_path, engine='openpyxl') as writer:
                    df.to_excel(writer, sheet_name='التدقيق', index=False)
                    worksheet = writer.sheets['التدقيق']
                    worksheet.sheet_view.rightToLeft = True

                    # تنسيق العرض
                    for column in worksheet.columns:
                        max_length = 0
                        column = [cell for cell in column]
                        for cell in column:
                            try:
                                if len(str(cell.value)) > max_length:
                                    max_length = len(str(cell.value))
                            except:
                                pass
                        adjusted_width = (max_length + 2) * 1.5
                        worksheet.column_dimensions[column[0].column_letter].width = adjusted_width

                messagebox.showinfo("نجاح", f"تم حفظ القالب بنجاح:\n{file_path}")

            except ImportError:
                messagebox.showerror("خطأ", "يجب تثبيت مكتبة pandas و openpyxl\npip install pandas openpyxl")
            except Exception as e:
                messagebox.showerror("خطأ", f"فشل في إنشاء القالب:\n{str(e)}")

        # ================== دالة الاستيراد ==================
        def import_file():
            """استيراد ملف Excel للمطابقة مع عدد المجتازين"""
            nonlocal imported_data, comparison_results, missing_in_excel

            try:
                import pandas as pd
                from tkinter import filedialog

                file_path = filedialog.askopenfilename(
                    title="اختر ملف Excel",
                    filetypes=[("Excel files", "*.xlsx *.xls"), ("All files", "*.*")]
                )

                if not file_path:
                    return

                # قراءة الملف
                df = pd.read_excel(file_path)

                if df.empty:
                    messagebox.showwarning("تنبيه", "الملف فارغ")
                    return

                # التحقق من وجود عمودين
                if len(df.columns) < 2:
                    messagebox.showwarning("تنبيه", "يجب أن يحتوي الملف على عمودين: رقم الدورة وعدد المجتازين")
                    return

                # تنظيف البيانات
                df = df.iloc[:, :2]  # أخذ أول عمودين
                df.columns = ['course_code', 'excel_passed_count']
                df = df.dropna()

                # تحويل الأنواع
                df['course_code'] = df['course_code'].astype(str).str.strip()
                df['excel_passed_count'] = pd.to_numeric(df['excel_passed_count'], errors='coerce').fillna(0).astype(
                    int)

                imported_data = df.to_dict('records')

                if not imported_data:
                    messagebox.showwarning("تنبيه", "لا توجد بيانات صالحة في الملف")
                    return

                # عرض معلومات الاستيراد
                import_info_label.config(
                    text=f"✅ تم استيراد {len(imported_data)} دورة للمطابقة",
                    fg="#2e7d32",
                    font=("Tajawal", 12, "bold")
                )

                # تفعيل زر المطابقة
                validate_btn.config(state=tk.NORMAL, bg="#2e7d32")

                # مسح النتائج السابقة
                for widget in numbers_tab.winfo_children():
                    if widget != import_card:
                        widget.destroy()

            except ImportError:
                messagebox.showerror("خطأ", "يجب تثبيت مكتبة pandas\npip install pandas openpyxl")
            except Exception as e:
                messagebox.showerror("خطأ", f"خطأ في قراءة الملف:\n{str(e)}")

        # ================== دالة المطابقة ==================
        def perform_validation():
            """تنفيذ عملية المطابقة مع التحقق من عدد المجتازين"""
            nonlocal comparison_results, missing_in_excel

            if not imported_data:
                messagebox.showwarning("تنبيه", "لم يتم استيراد أي بيانات")
                return

            # مسح النتائج السابقة
            for widget in numbers_tab.winfo_children():
                if widget != import_card:
                    widget.destroy()

            comparison_results = []
            missing_in_excel = []

            matched_count = 0  # متطابق تماماً
            not_matched_count = 0  # غير متطابق
            not_found_in_db = 0  # غير موجود

            cursor = self.db_conn.cursor()

            # إنشاء بطاقة شريط التقدم
            progress_card = tk.Frame(numbers_tab, bg="white", relief=tk.FLAT, bd=0)
            progress_card.pack(fill=tk.X, pady=15, padx=20)

            progress_content = tk.Frame(progress_card, bg="white", padx=40, pady=25)
            progress_content.pack(fill=tk.X)

            tk.Label(
                progress_content,
                text="⏳ جاري المطابقة...",
                font=("Tajawal", 14, "bold"),
                bg="white",
                fg="#1a237e"
            ).pack()

            progress_bar = ttk.Progressbar(
                progress_content,
                length=600,
                mode='determinate',
                maximum=len(imported_data)
            )
            progress_bar.pack(pady=15)

            # تخصيص لون شريط التقدم
            style.configure("TProgressbar",
                            troughcolor='#e0e0e0',
                            background='#1a237e',
                            borderwidth=0)

            audit_window.update()

            # إنشاء قائمة بأرقام الدورات في Excel
            excel_course_codes = [item['course_code'] for item in imported_data]

            # فحص كل دورة في Excel
            for i, item in enumerate(imported_data):
                course_code = item['course_code']
                excel_passed_count = item['excel_passed_count']

                # البحث عن الدورة في قاعدة البيانات مع حساب عدد المجتازين
                cursor.execute("""
                    SELECT 
                        c.course_name,
                        c.course_category,
                        DATE(c.start_date) as start_date,
                        DATE(c.end_date) as end_date,
                        COUNT(CASE WHEN p.participant_status IN ('مجتاز', 'باشر') THEN 1 END) as passed_count
                    FROM courses c
                    LEFT JOIN participants p ON c.id = p.course_id
                    WHERE c.course_code = ?
                    GROUP BY c.id, c.course_name, c.course_category, c.start_date, c.end_date
                """, (course_code,))

                result = cursor.fetchone()

                if result:
                    course_name = result[0]
                    course_category = result[1] if result[1] else ""
                    start_date = result[2] if result[2] else ""
                    end_date = result[3] if result[3] else ""
                    program_passed_count = result[4] if result[4] else 0

                    # التحقق من تطابق عدد المجتازين
                    if program_passed_count == excel_passed_count:
                        matched_count += 1
                        status = '✅ متطابق'
                        color = '#2e7d32'
                    else:
                        not_matched_count += 1
                        difference = program_passed_count - excel_passed_count
                        status = '❌ غير متطابق'
                        color = '#d32f2f'

                    comparison_results.append({
                        'course_code': course_code,
                        'course_name': course_name,
                        'course_category': course_category,
                        'start_date': start_date,
                        'end_date': end_date,
                        'excel_passed': excel_passed_count,
                        'program_passed': program_passed_count,
                        'difference': program_passed_count - excel_passed_count,
                        'status': status,
                        'color': color
                    })
                else:
                    not_found_in_db += 1
                    comparison_results.append({
                        'course_code': course_code,
                        'course_name': '—',
                        'course_category': '—',
                        'start_date': '—',
                        'end_date': '—',
                        'excel_passed': excel_passed_count,
                        'program_passed': '—',
                        'difference': '—',
                        'status': '⚠️ غير موجود في البرنامج',
                        'color': '#ff9800'
                    })

                # تحديث شريط التقدم
                progress_bar['value'] = i + 1
                audit_window.update()

            # فحص الدورات الموجودة في البرنامج وليست في Excel
            cursor.execute("""
                SELECT 
                    c.course_code, 
                    c.course_name,
                    c.course_category,
                    DATE(c.start_date) as start_date,
                    DATE(c.end_date) as end_date,
                    COUNT(CASE WHEN p.participant_status IN ('مجتاز', 'باشر') THEN 1 END) as passed_count
                FROM courses c
                LEFT JOIN participants p ON c.id = p.course_id
                GROUP BY c.id, c.course_code, c.course_name, c.course_category, c.start_date, c.end_date
                ORDER BY c.course_code
            """)

            all_db_courses = cursor.fetchall()

            for db_course in all_db_courses:
                if db_course[0] not in excel_course_codes:
                    missing_in_excel.append({
                        'course_code': db_course[0],
                        'course_name': db_course[1],
                        'course_category': db_course[2] if db_course[2] else "",
                        'start_date': db_course[3] if db_course[3] else "",
                        'end_date': db_course[4] if db_course[4] else "",
                        'passed_count': db_course[5] if db_course[5] else 0
                    })

            # إزالة شريط التقدم
            progress_card.destroy()

            # عرض النتائج
            display_results(matched_count, not_matched_count, not_found_in_db)

        # ================== دالة عرض النتائج ==================
        def display_results(matched, not_matched, not_found):
            """عرض نتائج المطابقة مع شجرة"""
            total = len(comparison_results)
            match_percentage = (matched / total * 100) if total > 0 else 0

            # ================== بطاقة ملخص النتائج ==================
            summary_card = tk.Frame(numbers_tab, bg="white", relief=tk.FLAT, bd=0)
            summary_card.pack(fill=tk.X, pady=15, padx=20)

            summary_content = tk.Frame(summary_card, bg="white", padx=40, pady=30)
            summary_content.pack(fill=tk.BOTH)

            # العنوان مع الأيقونة
            title_frame = tk.Frame(summary_content, bg="white")
            title_frame.pack(pady=(0, 20))

            tk.Label(
                title_frame,
                text="📊",
                font=("Arial", 24),
                bg="white",
                fg="#1a237e"
            ).pack(side=tk.RIGHT, padx=10)

            tk.Label(
                title_frame,
                text="نتائج التدقيق والمصادقة",
                font=("Tajawal", 20, "bold"),
                bg="white",
                fg="#1a237e"
            ).pack(side=tk.RIGHT)

            # خط فاصل
            tk.Frame(summary_content, bg="#e0e0e0", height=1).pack(fill=tk.X, pady=15)

            # إطار الإحصائيات
            stats_container = tk.Frame(summary_content, bg="white")
            stats_container.pack()

            # نسبة التطابق (بطاقة كبيرة)
            percentage_color = "#2e7d32" if match_percentage >= 90 else "#ff9800" if match_percentage >= 50 else "#d32f2f"

            percentage_card = tk.Frame(stats_container, bg="#f5f5f5", relief=tk.FLAT, bd=0)
            percentage_card.pack(pady=10)

            inner_frame = tk.Frame(percentage_card, bg="#f5f5f5", padx=40, pady=20)
            inner_frame.pack()

            tk.Label(
                inner_frame,
                text="نسبة التطابق الإجمالية",
                font=("Tajawal", 14),
                bg="#f5f5f5",
                fg="#5f6368"
            ).pack()

            tk.Label(
                inner_frame,
                text=f"{match_percentage:.1f}%",
                font=("Tajawal", 48, "bold"),
                bg="#f5f5f5",
                fg=percentage_color
            ).pack()

            # البطاقات الإحصائية
            cards_frame = tk.Frame(stats_container, bg="white")
            cards_frame.pack(pady=20)

            stats_data = [
                ("✅ متطابقة", matched, "#e8f5e9", "#2e7d32"),
                ("❌ غير متطابقة", not_matched, "#ffebee", "#d32f2f"),
                ("⚠️ غير موجودة", not_found, "#fff3e0", "#ff9800"),
                ("📍 غير مضمنة", len(missing_in_excel), "#f3e5f5", "#9c27b0")
            ]

            for label, value, bg_color, fg_color in stats_data:
                stat_card = tk.Frame(cards_frame, bg=bg_color, relief=tk.FLAT, width=150, height=100)
                stat_card.pack(side=tk.RIGHT, padx=10)
                stat_card.pack_propagate(False)

                tk.Label(
                    stat_card,
                    text=label,
                    font=("Tajawal", 11),
                    bg=bg_color,
                    fg=fg_color
                ).pack(pady=(15, 5))

                tk.Label(
                    stat_card,
                    text=str(value),
                    font=("Tajawal", 24, "bold"),
                    bg=bg_color,
                    fg=fg_color
                ).pack()

            # ================== بطاقة الجدول التفصيلي ==================
            tree_card = tk.Frame(numbers_tab, bg="white", relief=tk.FLAT, bd=0)
            tree_card.pack(fill=tk.BOTH, expand=True, pady=15, padx=20)

            tree_content = tk.Frame(tree_card, bg="white", padx=30, pady=25)
            tree_content.pack(fill=tk.BOTH, expand=True)

            # العنوان
            tk.Label(
                tree_content,
                text="📋 تفاصيل نتائج المطابقة",
                font=("Tajawal", 18, "bold"),
                bg="white",
                fg="#1a237e"
            ).pack(pady=(0, 15))

            # إنشاء Notebook للتبويبات الفرعية
            notebook = ttk.Notebook(tree_content)
            notebook.pack(fill=tk.BOTH, expand=True)

            # ================== تبويب نتائج الفحص ==================
            all_results_tab = tk.Frame(notebook, bg="white")
            notebook.add(all_results_tab, text=f"نتائج الفحص ({len(comparison_results)})")

            # إطار الشجرة
            all_tree_frame = tk.Frame(all_results_tab, bg="white")
            all_tree_frame.pack(fill=tk.BOTH, expand=True, padx=15, pady=15)

            # إنشاء الشجرة
            columns = ("الحالة", "الفرق", "مجتازين البرنامج", "مجتازين Excel",
                       "تاريخ النهاية", "تاريخ البداية", "فئة الدورة", "اسم الدورة", "رقم الدورة")

            all_tree = ttk.Treeview(all_tree_frame, columns=columns, show="headings", height=15)

            # تعريف الأعمدة
            all_tree.column("رقم الدورة", width=100, anchor="center")
            all_tree.column("اسم الدورة", width=250, anchor="center")
            all_tree.column("فئة الدورة", width=120, anchor="center")
            all_tree.column("تاريخ البداية", width=100, anchor="center")
            all_tree.column("تاريخ النهاية", width=100, anchor="center")
            all_tree.column("مجتازين Excel", width=110, anchor="center")
            all_tree.column("مجتازين البرنامج", width=120, anchor="center")
            all_tree.column("الفرق", width=70, anchor="center")
            all_tree.column("الحالة", width=120, anchor="center")

            # تعريف العناوين
            for col in columns:
                all_tree.heading(col, text=col)

            # تخصيص الشكل
            style.configure("Treeview.Heading",
                            font=("Tajawal", 11, "bold"),
                            background="#f5f5f5",
                            foreground="#37474f")
            style.configure("Treeview",
                            font=("Tajawal", 10),
                            rowheight=35,
                            borderwidth=0)

            # إضافة البيانات مع الألوان
            all_tree.tag_configure('matched', background='#e8f5e9', foreground='#2e7d32')
            all_tree.tag_configure('not_matched', background='#ffebee', foreground='#d32f2f')
            all_tree.tag_configure('not_found', background='#fff3e0', foreground='#ff9800')

            for result in comparison_results:
                if result['status'] == '✅ متطابق':
                    tag = 'matched'
                elif result['status'] == '❌ غير متطابق':
                    tag = 'not_matched'
                else:
                    tag = 'not_found'

                # تنسيق الفرق
                diff_text = ""
                if result['difference'] != '—':
                    if result['difference'] > 0:
                        diff_text = f"+{result['difference']}"
                    elif result['difference'] < 0:
                        diff_text = str(result['difference'])
                    else:
                        diff_text = "0"
                else:
                    diff_text = "—"

                all_tree.insert("", tk.END, values=(
                    result['status'],
                    diff_text,
                    result['program_passed'],
                    result['excel_passed'],
                    result['end_date'],
                    result['start_date'],
                    result['course_category'],
                    result['course_name'],
                    result['course_code']
                ), tags=(tag,))

            # شريط التمرير للشجرة
            tree_scrollbar_y = ttk.Scrollbar(all_tree_frame, orient="vertical", command=all_tree.yview)
            tree_scrollbar_x = ttk.Scrollbar(all_tree_frame, orient="horizontal", command=all_tree.xview)
            all_tree.configure(
                yscrollcommand=tree_scrollbar_y.set,
                xscrollcommand=tree_scrollbar_x.set
            )

            all_tree.grid(row=0, column=0, sticky="nsew")
            tree_scrollbar_y.grid(row=0, column=1, sticky="ns")
            tree_scrollbar_x.grid(row=1, column=0, sticky="ew")

            all_tree_frame.grid_rowconfigure(0, weight=1)
            all_tree_frame.grid_columnconfigure(0, weight=1)

            # ================== تبويب الدورات غير المضمنة ==================
            if len(missing_in_excel) > 0:
                missing_tab = tk.Frame(notebook, bg="white")
                notebook.add(missing_tab, text=f"غير مضمنة ({len(missing_in_excel)})")

                # وصف
                desc_frame = tk.Frame(missing_tab, bg="#f3e5f5", relief=tk.FLAT)
                desc_frame.pack(fill=tk.X, padx=15, pady=15)

                tk.Label(
                    desc_frame,
                    text="📍 هذه الدورات موجودة في البرنامج ولكن لم يتم تضمينها في ملف Excel للفحص",
                    font=("Tajawal", 12, "bold"),
                    bg="#f3e5f5",
                    fg="#9c27b0"
                ).pack(pady=10)

                # إطار الشجرة
                missing_tree_frame = tk.Frame(missing_tab, bg="white")
                missing_tree_frame.pack(fill=tk.BOTH, expand=True, padx=15, pady=(0, 15))

                # إنشاء الشجرة للدورات غير المضمنة
                missing_columns = ("مجتازين البرنامج", "تاريخ النهاية", "تاريخ البداية",
                                   "فئة الدورة", "اسم الدورة", "رقم الدورة")

                missing_tree = ttk.Treeview(missing_tree_frame, columns=missing_columns, show="headings", height=15)

                missing_tree.column("رقم الدورة", width=120, anchor="center")
                missing_tree.column("اسم الدورة", width=300, anchor="center")
                missing_tree.column("فئة الدورة", width=150, anchor="center")
                missing_tree.column("تاريخ البداية", width=120, anchor="center")
                missing_tree.column("تاريخ النهاية", width=120, anchor="center")
                missing_tree.column("مجتازين البرنامج", width=130, anchor="center")

                for col in missing_columns:
                    missing_tree.heading(col, text=col)

                # إضافة البيانات
                missing_tree.tag_configure('missing', background='#f3e5f5', foreground='#9c27b0')

                for course in missing_in_excel:
                    missing_tree.insert("", tk.END, values=(
                        course['passed_count'],
                        course['end_date'],
                        course['start_date'],
                        course['course_category'],
                        course['course_name'],
                        course['course_code']
                    ), tags=('missing',))

                # شريط التمرير
                missing_scrollbar_y = ttk.Scrollbar(missing_tree_frame, orient="vertical", command=missing_tree.yview)
                missing_scrollbar_x = ttk.Scrollbar(missing_tree_frame, orient="horizontal", command=missing_tree.xview)
                missing_tree.configure(
                    yscrollcommand=missing_scrollbar_y.set,
                    xscrollcommand=missing_scrollbar_x.set
                )

                missing_tree.grid(row=0, column=0, sticky="nsew")
                missing_scrollbar_y.grid(row=0, column=1, sticky="ns")
                missing_scrollbar_x.grid(row=1, column=0, sticky="ew")

                missing_tree_frame.grid_rowconfigure(0, weight=1)
                missing_tree_frame.grid_columnconfigure(0, weight=1)

            # ================== تبويب الدورات التي تحتاج مراجعة ==================
            if not_matched > 0 or not_found > 0:
                issues_tab = tk.Frame(notebook, bg="white")
                notebook.add(issues_tab, text=f"تحتاج مراجعة ({not_matched + not_found})")

                # إطار الشجرة
                issues_tree_frame = tk.Frame(issues_tab, bg="white")
                issues_tree_frame.pack(fill=tk.BOTH, expand=True, padx=15, pady=15)

                issues_tree = ttk.Treeview(issues_tree_frame, columns=columns, show="headings", height=15)

                # نفس تعريف الأعمدة
                for i, col in enumerate(columns):
                    issues_tree.column(col, width=all_tree.column(col)['width'], anchor="center")
                    issues_tree.heading(col, text=col)

                # إضافة البيانات غير المتطابقة فقط
                issues_tree.tag_configure('not_matched', background='#ffebee', foreground='#d32f2f')
                issues_tree.tag_configure('not_found', background='#fff3e0', foreground='#ff9800')

                for result in comparison_results:
                    if result['status'] != '✅ متطابق':
                        tag = 'not_matched' if result['status'] == '❌ غير متطابق' else 'not_found'

                        diff_text = ""
                        if result['difference'] != '—':
                            if result['difference'] > 0:
                                diff_text = f"+{result['difference']}"
                            elif result['difference'] < 0:
                                diff_text = str(result['difference'])
                            else:
                                diff_text = "0"
                        else:
                            diff_text = "—"

                        issues_tree.insert("", tk.END, values=(
                            result['status'],
                            diff_text,
                            result['program_passed'],
                            result['excel_passed'],
                            result['end_date'],
                            result['start_date'],
                            result['course_category'],
                            result['course_name'],
                            result['course_code']
                        ), tags=(tag,))

                # شريط التمرير
                issues_scrollbar_y = ttk.Scrollbar(issues_tree_frame, orient="vertical", command=issues_tree.yview)
                issues_scrollbar_x = ttk.Scrollbar(issues_tree_frame, orient="horizontal", command=issues_tree.xview)
                issues_tree.configure(
                    yscrollcommand=issues_scrollbar_y.set,
                    xscrollcommand=issues_scrollbar_x.set
                )

                issues_tree.grid(row=0, column=0, sticky="nsew")
                issues_scrollbar_y.grid(row=0, column=1, sticky="ns")
                issues_scrollbar_x.grid(row=1, column=0, sticky="ew")

                issues_tree_frame.grid_rowconfigure(0, weight=1)
                issues_tree_frame.grid_columnconfigure(0, weight=1)

            # ================== منطقة الأزرار ==================
            export_frame = tk.Frame(numbers_tab, bg="#f0f2f5")
            export_frame.pack(pady=20)

            def export_results():
                """تصدير النتائج إلى Excel"""
                try:
                    import pandas as pd
                    from tkinter import filedialog
                    import datetime

                    file_path = filedialog.asksaveasfilename(
                        defaultextension=".xlsx",
                        filetypes=[("Excel files", "*.xlsx")],
                        initialfile=f"نتائج_التدقيق_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
                    )

                    if not file_path:
                        return

                    with pd.ExcelWriter(file_path, engine='openpyxl') as writer:
                        # ورقة الملخص
                        summary_data = {
                            'الوصف': [
                                'إجمالي الدورات المفحوصة',
                                'دورات متطابقة',
                                'دورات غير متطابقة',
                                'دورات غير موجودة في البرنامج',
                                'دورات البرنامج غير المضمنة في الفحص',
                                'نسبة التطابق'
                            ],
                            'القيمة': [
                                total,
                                matched,
                                not_matched,
                                not_found,
                                len(missing_in_excel),
                                f"{match_percentage:.1f}%"
                            ]
                        }
                        summary_df = pd.DataFrame(summary_data)
                        summary_df.to_excel(writer, sheet_name='الملخص', index=False)
                        worksheet = writer.sheets['الملخص']
                        worksheet.sheet_view.rightToLeft = True

                        # ورقة النتائج التفصيلية
                        detailed_results = []
                        for result in comparison_results:
                            detailed_results.append({
                                'رقم الدورة': result['course_code'],
                                'اسم الدورة': result['course_name'],
                                'فئة الدورة': result['course_category'],
                                'تاريخ البداية': result['start_date'],
                                'تاريخ النهاية': result['end_date'],
                                'مجتازين Excel': result['excel_passed'],
                                'مجتازين البرنامج': result['program_passed'],
                                'الفرق': result['difference'] if result['difference'] != '—' else '',
                                'الحالة': result['status'].replace('✅ ', '').replace('❌ ', '').replace('⚠️ ', '')
                            })

                        if detailed_results:
                            results_df = pd.DataFrame(detailed_results)
                            results_df.to_excel(writer, sheet_name='النتائج التفصيلية', index=False)
                            worksheet = writer.sheets['النتائج التفصيلية']
                            worksheet.sheet_view.rightToLeft = True

                        # ورقة الدورات غير المضمنة
                        if missing_in_excel:
                            missing_data = []
                            for course in missing_in_excel:
                                missing_data.append({
                                    'رقم الدورة': course['course_code'],
                                    'اسم الدورة': course['course_name'],
                                    'فئة الدورة': course['course_category'],
                                    'تاريخ البداية': course['start_date'],
                                    'تاريخ النهاية': course['end_date'],
                                    'مجتازين البرنامج': course['passed_count']
                                })

                            missing_df = pd.DataFrame(missing_data)
                            missing_df.to_excel(writer, sheet_name='غير مضمنة في الفحص', index=False)
                            worksheet = writer.sheets['غير مضمنة في الفحص']
                            worksheet.sheet_view.rightToLeft = True

                    messagebox.showinfo("نجاح", f"تم تصدير النتائج بنجاح:\n{file_path}")

                except Exception as e:
                    messagebox.showerror("خطأ", f"فشل في تصدير النتائج:\n{str(e)}")

            tk.Button(
                export_frame,
                text="📥 تصدير النتائج إلى Excel",
                font=("Tajawal", 14, "bold"),
                bg="#1a237e",
                fg="white",
                padx=40,
                pady=15,
                bd=0,
                relief=tk.FLAT,
                cursor="hand2",
                command=export_results
            ).pack()

        # أزرار الاستيراد
        import_btn = tk.Button(
            buttons_frame,
            text="📂 استيراد ملف Excel",
            font=("Tajawal", 12, "bold"),
            bg="#1a237e",
            fg="white",
            padx=30,
            pady=12,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=import_file
        )
        import_btn.pack(side=tk.RIGHT, padx=8)

        # زر تحميل القالب
        template_btn = tk.Button(
            buttons_frame,
            text="📄 تحميل قالب فارغ",
            font=("Tajawal", 12, "bold"),
            bg="#607d8b",
            fg="white",
            padx=30,
            pady=12,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=download_template
        )
        template_btn.pack(side=tk.RIGHT, padx=8)

        # زر المطابقة
        validate_btn = tk.Button(
            buttons_frame,
            text="✓ بدء التدقيق",
            font=("Tajawal", 12, "bold"),
            bg="#9e9e9e",
            fg="white",
            padx=30,
            pady=12,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=perform_validation,
            state=tk.DISABLED
        )
        validate_btn.pack(side=tk.RIGHT, padx=8)

        # معلومات الاستيراد
        import_info_label = tk.Label(
            import_content,
            text="لم يتم استيراد أي ملف بعد",
            font=("Tajawal", 11),
            bg="white",
            fg="#9e9e9e"
        )
        import_info_label.pack(pady=(20, 0))

        # ================== التبويب الثاني: التحقق من أرقام الدورات ==================
        verification_tab = tk.Frame(main_tab_control, bg="#f0f2f5")
        main_tab_control.add(verification_tab, text="🔍 التحقق من أرقام الدورات")

        # بطاقة الاستيراد للتحقق من الدورات
        import_verify_card = tk.Frame(verification_tab, bg="white", relief=tk.FLAT, bd=0)
        import_verify_card.pack(fill=tk.X, pady=15, padx=20)

        import_verify_content = tk.Frame(import_verify_card, bg="white", padx=40, pady=30)
        import_verify_content.pack(fill=tk.BOTH)

        # رأس البطاقة
        verify_header = tk.Frame(import_verify_content, bg="white")
        verify_header.pack(fill=tk.X, pady=(0, 20))

        tk.Label(
            verify_header,
            text="🔍",
            font=("Arial", 28),
            bg="white",
            fg="#1a237e"
        ).pack(side=tk.RIGHT, padx=10)

        verify_header_text = tk.Frame(verify_header, bg="white")
        verify_header_text.pack(side=tk.RIGHT)

        tk.Label(
            verify_header_text,
            text="التحقق من وجود أرقام الدورات",
            font=("Tajawal", 18, "bold"),
            bg="white",
            fg="#1a237e"
        ).pack(anchor="w")

        tk.Label(
            verify_header_text,
            text="قم برفع ملف يحتوي على أرقام الدورات للتحقق من وجودها",
            font=("Tajawal", 11),
            bg="white",
            fg="#757575"
        ).pack(anchor="w")

        # خط فاصل
        tk.Frame(import_verify_content, bg="#e0e0e0", height=1).pack(fill=tk.X, pady=15)

        # إطار أزرار التحقق
        verify_buttons_frame = tk.Frame(import_verify_content, bg="white")
        verify_buttons_frame.pack(pady=20)

        # ================== دالة تحميل قالب التحقق ==================
        def download_verify_template():
            """تحميل قالب Excel للتحقق من الدورات"""
            try:
                import pandas as pd
                from tkinter import filedialog

                file_path = filedialog.asksaveasfilename(
                    defaultextension=".xlsx",
                    filetypes=[("Excel files", "*.xlsx")],
                    initialfile="قالب_التحقق_من_الدورات.xlsx"
                )

                if not file_path:
                    return

                # إنشاء قالب مع عمود واحد
                template_data = {
                    'رقم الدورة': ['101', '102', '103', '104', '105', '106', '107', '108', '109', '110']
                }

                df = pd.DataFrame(template_data)

                # حفظ مع التنسيق
                with pd.ExcelWriter(file_path, engine='openpyxl') as writer:
                    df.to_excel(writer, sheet_name='أرقام الدورات', index=False)
                    worksheet = writer.sheets['أرقام الدورات']
                    worksheet.sheet_view.rightToLeft = True

                    # تنسيق العرض
                    from openpyxl.styles import Font, Alignment, PatternFill

                    # تنسيق الرأس
                    header_cell = worksheet['A1']
                    header_cell.font = Font(name='Tajawal', size=12, bold=True, color='FFFFFF')
                    header_cell.fill = PatternFill(start_color='1e3a5f', end_color='1e3a5f', fill_type='solid')
                    header_cell.alignment = Alignment(horizontal='center', vertical='center')

                    # عرض العمود
                    worksheet.column_dimensions['A'].width = 20

                messagebox.showinfo("نجاح", f"تم حفظ القالب بنجاح:\n{file_path}")

            except ImportError:
                messagebox.showerror("خطأ", "يجب تثبيت مكتبة pandas و openpyxl\npip install pandas openpyxl")
            except Exception as e:
                messagebox.showerror("خطأ", f"فشل في إنشاء القالب:\n{str(e)}")

        # ================== دالة استيراد والتحقق من الدورات ==================
        def import_and_verify_courses():
            """استيراد ملف Excel والتحقق من وجود أرقام الدورات"""
            try:
                import pandas as pd
                from tkinter import filedialog
                from tkinter import scrolledtext

                file_path = filedialog.askopenfilename(
                    title="اختر ملف Excel لأرقام الدورات",
                    filetypes=[("Excel files", "*.xlsx *.xls"), ("All files", "*.*")]
                )

                if not file_path:
                    return

                # قراءة الملف
                df = pd.read_excel(file_path)

                if df.empty:
                    messagebox.showwarning("تنبيه", "الملف فارغ")
                    return

                # أخذ أول عمود فقط
                course_codes = df.iloc[:, 0].astype(str).str.strip().tolist()
                course_codes = [code for code in course_codes if code and code != 'nan']

                if not course_codes:
                    messagebox.showwarning("تنبيه", "لا توجد أرقام دورات صالحة في الملف")
                    return

                # مسح النتائج السابقة
                for widget in verification_tab.winfo_children():
                    if widget != import_verify_card:
                        widget.destroy()

                # البحث في قاعدة البيانات
                cursor = self.db_conn.cursor()

                # جلب جميع أرقام الدورات الموجودة في البرنامج
                cursor.execute("SELECT course_code FROM courses")
                db_courses = set([row[0] for row in cursor.fetchall()])

                # التحقق من المطابقة
                imported_set = set(course_codes)
                found_courses = imported_set.intersection(db_courses)
                not_found_courses = imported_set - db_courses

                # عرض النتائج
                results_card = tk.Frame(verification_tab, bg="white", relief=tk.FLAT, bd=0)
                results_card.pack(fill=tk.BOTH, expand=True, pady=15, padx=20)

                results_content = tk.Frame(results_card, bg="white", padx=40, pady=30)
                results_content.pack(fill=tk.BOTH, expand=True)

                # العنوان
                title_frame = tk.Frame(results_content, bg="white")
                title_frame.pack(pady=(0, 20))

                tk.Label(
                    title_frame,
                    text="📊",
                    font=("Arial", 24),
                    bg="white",
                    fg="#1a237e"
                ).pack(side=tk.RIGHT, padx=10)

                tk.Label(
                    title_frame,
                    text="نتائج التحقق من أرقام الدورات",
                    font=("Tajawal", 20, "bold"),
                    bg="white",
                    fg="#1a237e"
                ).pack(side=tk.RIGHT)

                # خط فاصل
                tk.Frame(results_content, bg="#e0e0e0", height=1).pack(fill=tk.X, pady=15)

                # الإحصائيات
                stats_frame = tk.Frame(results_content, bg="white")
                stats_frame.pack(pady=20)

                total_imported = len(imported_set)
                total_found = len(found_courses)
                total_not_found = len(not_found_courses)
                match_percentage = (total_found / total_imported * 100) if total_imported > 0 else 0

                # عرض الإحصائيات
                stats_row = tk.Frame(stats_frame, bg="white")
                stats_row.pack()

                # البطاقات الإحصائية
                stat_cards = [
                    ("إجمالي المستوردة", total_imported, "#e3f2fd", "#1976d2"),
                    ("✅ موجودة", total_found, "#e8f5e9", "#2e7d32"),
                    ("❌ غير موجودة", total_not_found, "#ffebee", "#d32f2f"),
                    ("نسبة المطابقة", f"{match_percentage:.1f}%", "#f5f5f5",
                     "#2e7d32" if match_percentage >= 90 else "#ff9800" if match_percentage >= 50 else "#d32f2f")
                ]

                for label, value, bg_color, fg_color in stat_cards:
                    stat = tk.Frame(stats_row, bg=bg_color, relief=tk.FLAT, width=160, height=100)
                    stat.pack(side=tk.RIGHT, padx=10, pady=10)
                    stat.pack_propagate(False)

                    tk.Label(
                        stat,
                        text=label,
                        font=("Tajawal", 11),
                        bg=bg_color,
                        fg=fg_color
                    ).pack(pady=(15, 5))

                    tk.Label(
                        stat,
                        text=str(value),
                        font=("Tajawal", 22, "bold"),
                        bg=bg_color,
                        fg=fg_color
                    ).pack()

                # عرض النتائج حسب الحالة
                if total_not_found == 0:
                    # جميع الدورات موجودة
                    success_frame = tk.Frame(results_content, bg="#e8f5e9", relief=tk.FLAT)
                    success_frame.pack(fill=tk.X, pady=20)

                    inner = tk.Frame(success_frame, bg="#e8f5e9", padx=30, pady=20)
                    inner.pack()

                    tk.Label(
                        inner,
                        text="✅ ممتاز! جميع أرقام الدورات متطابقة",
                        font=("Tajawal", 16, "bold"),
                        bg="#e8f5e9",
                        fg="#2e7d32"
                    ).pack()

                    tk.Label(
                        inner,
                        text=f"تم التحقق من {total_imported} دورة وجميعها موجودة في البرنامج",
                        font=("Tajawal", 12),
                        bg="#e8f5e9",
                        fg="#2e7d32"
                    ).pack(pady=(5, 0))

                else:
                    # يوجد دورات غير موجودة
                    warning_frame = tk.Frame(results_content, bg="#fff3e0", relief=tk.FLAT)
                    warning_frame.pack(fill=tk.X, pady=15)

                    tk.Label(
                        warning_frame,
                        text="⚠️ تنبيه: يوجد دورات غير موجودة في البرنامج",
                        font=("Tajawal", 14, "bold"),
                        bg="#fff3e0",
                        fg="#ff9800"
                    ).pack(pady=10)

                    # عرض الدورات غير الموجودة
                    not_found_frame = tk.Frame(results_content, bg="white")
                    not_found_frame.pack(fill=tk.BOTH, expand=True, pady=15)

                    tk.Label(
                        not_found_frame,
                        text="أرقام الدورات غير الموجودة:",
                        font=("Tajawal", 13, "bold"),
                        bg="white",
                        fg="#d32f2f"
                    ).pack(anchor="e", pady=(0, 10))

                    # إطار لعرض أرقام الدورات
                    courses_display_frame = tk.Frame(not_found_frame, bg="white", relief=tk.SUNKEN, bd=1)
                    courses_display_frame.pack(fill=tk.BOTH, expand=True, padx=15)

                    # Text widget لعرض الأرقام
                    courses_text = scrolledtext.ScrolledText(
                        courses_display_frame,
                        wrap=tk.WORD,
                        width=60,
                        height=10,
                        font=("Consolas", 11),
                        bg="#fff5f5",
                        fg="#d32f2f"
                    )
                    courses_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)

                    # إضافة أرقام الدورات غير الموجودة
                    not_found_sorted = sorted(list(not_found_courses))
                    courses_text.insert(tk.END, ", ".join(not_found_sorted))
                    courses_text.config(state=tk.DISABLED)

                    # إطار الأزرار
                    action_buttons_frame = tk.Frame(not_found_frame, bg="white")
                    action_buttons_frame.pack(pady=15)

                    def copy_not_found_courses():
                        """نسخ أرقام الدورات غير الموجودة"""
                        try:
                            audit_window.clipboard_clear()
                            audit_window.clipboard_append(", ".join(not_found_sorted))

                            copy_msg = tk.Label(
                                action_buttons_frame,
                                text="✓ تم النسخ بنجاح",
                                font=("Tajawal", 10),
                                bg="white",
                                fg="#2e7d32"
                            )
                            copy_msg.pack()
                            audit_window.after(2000, copy_msg.destroy)
                        except Exception as e:
                            messagebox.showerror("خطأ", f"فشل في النسخ:\n{str(e)}")

                    # زر النسخ
                    copy_btn = tk.Button(
                        action_buttons_frame,
                        text="📋 نسخ أرقام الدورات",
                        font=("Tajawal", 11, "bold"),
                        bg="#ff9800",
                        fg="white",
                        padx=25,
                        pady=10,
                        bd=0,
                        relief=tk.FLAT,
                        cursor="hand2",
                        command=copy_not_found_courses
                    )
                    copy_btn.pack(side=tk.RIGHT, padx=8)

                    def export_not_found():
                        """تصدير الدورات غير الموجودة إلى Excel"""
                        try:
                            import pandas as pd
                            from tkinter import filedialog
                            import datetime

                            file_path = filedialog.asksaveasfilename(
                                defaultextension=".xlsx",
                                filetypes=[("Excel files", "*.xlsx")],
                                initialfile=f"دورات_غير_موجودة_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
                            )

                            if not file_path:
                                return

                            # إنشاء DataFrame
                            df = pd.DataFrame({
                                'رقم الدورة': not_found_sorted,
                                'الحالة': ['غير موجود في البرنامج'] * len(not_found_sorted)
                            })

                            # حفظ مع التنسيق
                            with pd.ExcelWriter(file_path, engine='openpyxl') as writer:
                                df.to_excel(writer, sheet_name='الدورات غير الموجودة', index=False)
                                worksheet = writer.sheets['الدورات غير الموجودة']
                                worksheet.sheet_view.rightToLeft = True

                                from openpyxl.styles import Font, Alignment, PatternFill, Border, Side

                                # تنسيق الرأس
                                header_font = Font(name='Tajawal', size=12, bold=True, color='FFFFFF')
                                header_fill = PatternFill(start_color='d32f2f', end_color='d32f2f', fill_type='solid')

                                for cell in worksheet[1]:
                                    cell.font = header_font
                                    cell.fill = header_fill
                                    cell.alignment = Alignment(horizontal='center', vertical='center')

                                # عرض الأعمدة
                                worksheet.column_dimensions['A'].width = 20
                                worksheet.column_dimensions['B'].width = 30

                            messagebox.showinfo("نجاح", f"تم تصدير الدورات غير الموجودة:\n{file_path}")

                        except Exception as e:
                            messagebox.showerror("خطأ", f"فشل في التصدير:\n{str(e)}")

                    # زر التصدير
                    export_btn = tk.Button(
                        action_buttons_frame,
                        text="📥 تصدير إلى Excel",
                        font=("Tajawal", 11, "bold"),
                        bg="#607d8b",
                        fg="white",
                        padx=25,
                        pady=10,
                        bd=0,
                        relief=tk.FLAT,
                        cursor="hand2",
                        command=export_not_found
                    )
                    export_btn.pack(side=tk.RIGHT, padx=8)

                # زر تصدير التقرير الكامل
                export_full_frame = tk.Frame(results_content, bg="white")
                export_full_frame.pack(pady=20)

                def export_full_report():
                    """تصدير تقرير كامل بنتائج التحقق"""
                    try:
                        import pandas as pd
                        from tkinter import filedialog
                        import datetime

                        file_path = filedialog.asksaveasfilename(
                            defaultextension=".xlsx",
                            filetypes=[("Excel files", "*.xlsx")],
                            initialfile=f"تقرير_التحقق_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
                        )

                        if not file_path:
                            return

                        with pd.ExcelWriter(file_path, engine='openpyxl') as writer:
                            # ورقة الملخص
                            summary_df = pd.DataFrame({
                                'الوصف': [
                                    'إجمالي الدورات المستوردة',
                                    'الدورات الموجودة',
                                    'الدورات غير الموجودة',
                                    'نسبة المطابقة'
                                ],
                                'القيمة': [
                                    total_imported,
                                    total_found,
                                    total_not_found,
                                    f"{match_percentage:.1f}%"
                                ]
                            })
                            summary_df.to_excel(writer, sheet_name='الملخص', index=False)

                            # ورقة جميع الدورات مع الحالة
                            all_courses = []
                            for code in course_codes:
                                status = "موجود ✅" if code in found_courses else "غير موجود ❌"
                                all_courses.append({'رقم الدورة': code, 'الحالة': status})

                            all_df = pd.DataFrame(all_courses)
                            all_df.to_excel(writer, sheet_name='جميع الدورات', index=False)

                            # ورقة الدورات غير الموجودة
                            if not_found_courses:
                                not_found_df = pd.DataFrame({'رقم الدورة': sorted(list(not_found_courses))})
                                not_found_df.to_excel(writer, sheet_name='الدورات غير الموجودة', index=False)

                            # ورقة الدورات الموجودة
                            if found_courses:
                                found_df = pd.DataFrame({'رقم الدورة': sorted(list(found_courses))})
                                found_df.to_excel(writer, sheet_name='الدورات الموجودة', index=False)

                            # التنسيق
                            workbook = writer.book
                            for sheet_name in workbook.sheetnames:
                                worksheet = workbook[sheet_name]
                                worksheet.sheet_view.rightToLeft = True

                                from openpyxl.styles import Font, Alignment, PatternFill

                                # تنسيق الرأس
                                header_font = Font(name='Tajawal', size=12, bold=True, color='FFFFFF')
                                header_fill = PatternFill(start_color='1e3a5f', end_color='1e3a5f', fill_type='solid')

                                for cell in worksheet[1]:
                                    cell.font = header_font
                                    cell.fill = header_fill
                                    cell.alignment = Alignment(horizontal='center', vertical='center')

                                # ضبط عرض الأعمدة
                                for column in worksheet.columns:
                                    max_length = 0
                                    column_letter = column[0].column_letter
                                    for cell in column:
                                        try:
                                            if len(str(cell.value)) > max_length:
                                                max_length = len(str(cell.value))
                                        except:
                                            pass
                                    adjusted_width = min(max_length + 5, 50)
                                    worksheet.column_dimensions[column_letter].width = adjusted_width

                        messagebox.showinfo("نجاح", f"تم تصدير التقرير الكامل:\n{file_path}")

                    except Exception as e:
                        messagebox.showerror("خطأ", f"فشل في التصدير:\n{str(e)}")

                tk.Button(
                    export_full_frame,
                    text="📊 تصدير التقرير الكامل",
                    font=("Tajawal", 13, "bold"),
                    bg="#1a237e",
                    fg="white",
                    padx=35,
                    pady=12,
                    bd=0,
                    relief=tk.FLAT,
                    cursor="hand2",
                    command=export_full_report
                ).pack()

            except ImportError:
                messagebox.showerror("خطأ", "يجب تثبيت مكتبة pandas\npip install pandas openpyxl")
            except Exception as e:
                messagebox.showerror("خطأ", f"حدث خطأ أثناء التحقق:\n{str(e)}")

        # أزرار التحقق من الدورات
        verify_import_btn = tk.Button(
            verify_buttons_frame,
            text="📂 استيراد ملف أرقام الدورات",
            font=("Tajawal", 12, "bold"),
            bg="#1a237e",
            fg="white",
            padx=30,
            pady=12,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=import_and_verify_courses
        )
        verify_import_btn.pack(side=tk.RIGHT, padx=8)

        # زر تحميل قالب التحقق
        verify_template_btn = tk.Button(
            verify_buttons_frame,
            text="📄 تحميل قالب التحقق",
            font=("Tajawal", 12, "bold"),
            bg="#607d8b",
            fg="white",
            padx=30,
            pady=12,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=download_verify_template
        )
        verify_template_btn.pack(side=tk.RIGHT, padx=8)

        # معلومات الاستيراد
        verify_info_label = tk.Label(
            import_verify_content,
            text="لم يتم استيراد أي ملف بعد",
            font=("Tajawal", 11),
            bg="white",
            fg="#9e9e9e"
        )
        verify_info_label.pack(pady=(20, 0))

        # ================== التبويب الثالث: مصادقة المتدربين برقم الهوية ==================
        identity_tab = tk.Frame(main_tab_control, bg="#f0f2f5")
        main_tab_control.add(identity_tab, text="🔐 مصادقة المتدربين برقم الهوية")

        # متغيرات لتخزين البيانات
        imported_identity_data = []
        comparison_identity_results = []
        not_in_excel = []
        not_in_program = []

        # بطاقة الاستيراد
        import_identity_card = tk.Frame(identity_tab, bg="white", relief=tk.FLAT, bd=0)
        import_identity_card.pack(fill=tk.X, pady=15, padx=20)

        import_identity_content = tk.Frame(import_identity_card, bg="white", padx=40, pady=30)
        import_identity_content.pack(fill=tk.BOTH)

        # رأس البطاقة
        identity_header = tk.Frame(import_identity_content, bg="white")
        identity_header.pack(fill=tk.X, pady=(0, 20))

        tk.Label(
            identity_header,
            text="🔐",
            font=("Arial", 28),
            bg="white",
            fg="#1a237e"
        ).pack(side=tk.RIGHT, padx=10)

        identity_header_text = tk.Frame(identity_header, bg="white")
        identity_header_text.pack(side=tk.RIGHT)

        tk.Label(
            identity_header_text,
            text="مصادقة المتدربين بناءً على رقم الهوية",
            font=("Tajawal", 18, "bold"),
            bg="white",
            fg="#1a237e"
        ).pack(anchor="w")

        tk.Label(
            identity_header_text,
            text="قم برفع ملف يحتوي على: رقم الهوية، الاسم، الحالة، السبب",
            font=("Tajawal", 11),
            bg="white",
            fg="#757575"
        ).pack(anchor="w")

        # خط فاصل
        tk.Frame(import_identity_content, bg="#e0e0e0", height=1).pack(fill=tk.X, pady=15)

        buttons_identity_frame = tk.Frame(import_identity_content, bg="white")
        buttons_identity_frame.pack(pady=20)

        # ================== دالة تحميل القالب ==================
        def download_identity_template():
            try:
                import pandas as pd
                from tkinter import filedialog

                file_path = filedialog.asksaveasfilename(
                    defaultextension=".xlsx",
                    filetypes=[("Excel files", "*.xlsx")],
                    initialfile="قالب_مصادقة_المتدربين.xlsx"
                )

                if not file_path:
                    return

                template_data = {
                    'رقم الهوية': ['1234567890', '0987654321', '1111111111'],
                    'الاسم': ['أحمد محمد', 'سارة علي', 'خالد عبدالله'],
                    'الحالة': ['باشر', 'رفض', 'رفض'],
                    'السبب': ['', 'عدم مباشرة الدورة', 'إلغاء الدورة']
                }

                df = pd.DataFrame(template_data)

                with pd.ExcelWriter(file_path, engine='openpyxl') as writer:
                    df.to_excel(writer, sheet_name='مصادقة المتدربين', index=False)
                    worksheet = writer.sheets['مصادقة المتدربين']
                    worksheet.sheet_view.rightToLeft = True

                    # تنسيق الأعمدة
                    worksheet.column_dimensions['A'].width = 20
                    worksheet.column_dimensions['B'].width = 30
                    worksheet.column_dimensions['C'].width = 15
                    worksheet.column_dimensions['D'].width = 40

                messagebox.showinfo("نجاح", f"تم حفظ القالب:\n{file_path}")

            except Exception as e:
                messagebox.showerror("خطأ", f"فشل إنشاء القالب:\n{str(e)}")

        # ================== دالة استيراد ومقارنة البيانات ==================
        def import_identity_file():
            nonlocal imported_identity_data, comparison_identity_results, not_in_excel, not_in_program

            try:
                import pandas as pd
                from tkinter import filedialog

                file_path = filedialog.askopenfilename(
                    title="اختر ملف Excel",
                    filetypes=[("Excel files", "*.xlsx *.xls"), ("All files", "*.*")]
                )

                if not file_path:
                    return

                # قراءة الملف
                df = pd.read_excel(file_path)

                if df.empty:
                    messagebox.showwarning("تنبيه", "الملف فارغ")
                    return

                # التحقق من عدد الأعمدة
                if len(df.columns) < 4:
                    messagebox.showwarning("تنبيه",
                                           f"الملف يحتوي على {len(df.columns)} أعمدة فقط. يجب أن يحتوي على 4 أعمدة على الأقل")
                    return

                # أخذ أول 4 أعمدة فقط وإعادة تسميتها
                df = df.iloc[:, :4].copy()  # أخذ أول 4 أعمدة فقط
                df.columns = ['national_id', 'name', 'status', 'reason']

                # إزالة الصفوف الفارغة (بدون رقم هوية)
                df = df.dropna(subset=['national_id'])

                # تنظيف البيانات
                df['national_id'] = df['national_id'].astype(str).str.strip()
                # إزالة .0 من أرقام الهوية إذا وجدت
                df['national_id'] = df['national_id'].apply(lambda x: x.split('.')[0] if '.' in x else x)

                df['name'] = df['name'].fillna('').astype(str).str.strip()
                df['status'] = df['status'].fillna('').astype(str).str.strip()
                df['reason'] = df['reason'].fillna('').astype(str).str.strip()

                # إزالة الصفوف التي ليس بها بيانات صالحة
                df = df[(df['national_id'] != '') & (df['national_id'] != 'nan')]

                imported_identity_data = df.to_dict('records')

                if not imported_identity_data:
                    messagebox.showwarning("تنبيه", "لا توجد بيانات صالحة في الملف")
                    return

                # عرض معلومات الاستيراد
                import_identity_info.config(
                    text=f"✅ تم استيراد {len(imported_identity_data)} متدرب للمصادقة",
                    fg="#2e7d32",
                    font=("Tajawal", 12, "bold")
                )

                # تفعيل زر المطابقة
                validate_identity_btn.config(state=tk.NORMAL, bg="#2e7d32")

                # مسح النتائج السابقة
                for widget in identity_tab.winfo_children():
                    if widget != import_identity_card:
                        widget.destroy()

                # عرض عينة من البيانات المستوردة للتأكد
                print(f"تم استيراد {len(imported_identity_data)} سجل")
                if imported_identity_data:
                    print("عينة من البيانات:")
                    for i, item in enumerate(imported_identity_data[:3]):
                        print(
                            f"  {i + 1}. الهوية: {item['national_id']}, الاسم: {item['name']}, الحالة: {item['status']}")

            except ImportError:
                messagebox.showerror("خطأ", "يجب تثبيت مكتبة pandas\npip install pandas openpyxl")
            except Exception as e:
                messagebox.showerror("خطأ", f"خطأ في قراءة الملف:\n{str(e)}")

        # ================== دالة المصادقة والمقارنة ==================
        def perform_identity_validation():
            nonlocal comparison_identity_results, not_in_excel, not_in_program

            if not imported_identity_data:
                messagebox.showwarning("تنبيه", "لم يتم استيراد بيانات")
                return

            # مسح النتائج السابقة
            for widget in identity_tab.winfo_children():
                if widget != import_identity_card:
                    widget.destroy()

            comparison_identity_results = []
            not_in_program = []
            not_in_excel = []
            conflicts_list = []
            matched_list = []

            cursor = self.db_conn.cursor()

            # شريط التقدم
            progress_card = tk.Frame(identity_tab, bg="white", relief=tk.FLAT, bd=0)
            progress_card.pack(fill=tk.X, pady=15, padx=20)

            progress_content = tk.Frame(progress_card, bg="white", padx=40, pady=25)
            progress_content.pack(fill=tk.X)

            tk.Label(
                progress_content,
                text="⏳ جاري المصادقة...",
                font=("Tajawal", 14, "bold"),
                bg="white",
                fg="#1a237e"
            ).pack()

            progress_bar = ttk.Progressbar(
                progress_content,
                length=600,
                mode='determinate',
                maximum=len(imported_identity_data)
            )
            progress_bar.pack(pady=15)

            audit_window.update()

            # جلب جميع المرفوضين من البرنامج
            cursor.execute("""
                SELECT DISTINCT
                    p.national_id,
                    p.participant_name,
                    p.participant_status,
                    p.cancellation_reason,
                    c.course_name,
                    c.course_code
                FROM participants p
                JOIN courses c ON p.course_id = c.id
                WHERE p.participant_status NOT IN ('مجتاز', 'باشر')
                AND p.participant_status IS NOT NULL
            """)

            program_rejected = {}
            for row in cursor.fetchall():
                if row[0]:  # إذا كان رقم الهوية موجود
                    national_id = str(row[0]).strip()
                    if '.' in national_id:
                        national_id = national_id.split('.')[0]
                    program_rejected[national_id] = {
                        'name': row[1],
                        'status': row[2],
                        'reason': row[3],
                        'course_name': row[4],
                        'course_code': row[5]
                    }

            # إنشاء قاموس للبيانات المستوردة من Excel
            excel_rejected = {}
            for trainee in imported_identity_data:
                national_id = str(trainee['national_id']).strip()
                if '.' in national_id:
                    national_id = national_id.split('.')[0]

                excel_rejected[national_id] = {
                    'name': trainee['name'],
                    'status': trainee['status'],
                    'reason': trainee['reason']
                }

            # المقارنة
            for i, (national_id, excel_data) in enumerate(excel_rejected.items()):
                if national_id in program_rejected:
                    # المتدرب موجود في كلا النظامين (مرفوض)
                    program_data = program_rejected[national_id]

                    # التحقق من توافق الحالة
                    excel_status_lower = excel_data['status'].lower().strip()
                    program_status_lower = program_data['status'].lower() if program_data['status'] else ''

                    is_match = False
                    status_icon = ""
                    color = ""

                    # كلاهما رفض بأي شكل
                    if ('رفض' in excel_status_lower or 'مرفوض' in excel_status_lower or
                            'لم يباشر' in excel_status_lower or 'إلغاء' in excel_status_lower):
                        is_match = True
                        status_icon = "✅ متطابق"
                        color = "#2e7d32"
                        matched_list.append({
                            'national_id': national_id,
                            'name': excel_data['name'],
                            'excel_status': excel_data['status'],
                            'program_status': program_data['status']
                        })

                    comparison_identity_results.append({
                        'national_id': national_id,
                        'excel_name': excel_data['name'],
                        'program_name': program_data['name'],
                        'excel_status': excel_data['status'],
                        'excel_reason': excel_data['reason'],
                        'program_status': program_data['status'],
                        'program_reason': program_data['reason'] or '',
                        'course_name': program_data['course_name'],
                        'course_code': program_data['course_code'],
                        'is_match': is_match,
                        'status_icon': status_icon,
                        'color': color
                    })
                else:
                    # المتدرب موجود في Excel فقط
                    not_in_program.append({
                        'national_id': national_id,
                        'name': excel_data['name'],
                        'status': excel_data['status'],
                        'reason': excel_data['reason']
                    })

                # تحديث شريط التقدم
                progress_bar['value'] = i + 1
                audit_window.update()

            # البحث عن المرفوضين في البرنامج وليسوا في Excel
            for national_id, program_data in program_rejected.items():
                if national_id not in excel_rejected:
                    not_in_excel.append({
                        'national_id': national_id,
                        'name': program_data['name'],
                        'status': program_data['status'],
                        'reason': program_data['reason'],
                        'course_name': program_data['course_name'],
                        'course_code': program_data['course_code']
                    })

            # حساب الإحصائيات الصحيحة
            total_excel_rejected = len(excel_rejected)
            total_program_rejected = len(program_rejected)
            matched_count = len(matched_list)
            not_in_program_count = len(not_in_program)
            not_in_excel_count = len(not_in_excel)

            # إزالة شريط التقدم
            progress_card.destroy()

            # عرض النتائج المحدثة
            display_identity_results(
                total_excel_rejected,
                total_program_rejected,
                matched_count,
                not_in_program_count,
                not_in_excel_count,
                matched_list,
                not_in_program,
                not_in_excel
            )

        # ================== دالة عرض النتائج ==================
        def display_identity_results(total_excel, total_program, matched_count,
                                     not_in_program_count, not_in_excel_count,
                                     matched_list, not_in_program, not_in_excel):
            """عرض نتائج المصادقة المحدثة"""

            # بطاقة ملخص النتائج
            summary_card = tk.Frame(identity_tab, bg="white", relief=tk.FLAT, bd=0)
            summary_card.pack(fill=tk.X, pady=15, padx=20)

            summary_content = tk.Frame(summary_card, bg="white", padx=40, pady=30)
            summary_content.pack(fill=tk.BOTH)

            # العنوان
            title_frame = tk.Frame(summary_content, bg="white")
            title_frame.pack(pady=(0, 20))

            tk.Label(
                title_frame,
                text="📊",
                font=("Arial", 24),
                bg="white",
                fg="#1a237e"
            ).pack(side=tk.RIGHT, padx=10)

            tk.Label(
                title_frame,
                text="نتائج مصادقة المرفوضين",
                font=("Tajawal", 20, "bold"),
                bg="white",
                fg="#1a237e"
            ).pack(side=tk.RIGHT)

            # خط فاصل
            tk.Frame(summary_content, bg="#e0e0e0", height=1).pack(fill=tk.X, pady=15)

            # الإحصائيات
            stats_container = tk.Frame(summary_content, bg="white")
            stats_container.pack()

            # عرض الإحصائيات الدقيقة
            stats_grid = tk.Frame(stats_container, bg="white")
            stats_grid.pack()

            # البطاقات الإحصائية
            row1 = tk.Frame(stats_grid, bg="white")
            row1.pack(pady=10)

            cards_data = [
                ("مرفوضين في Excel", total_excel, "#fff3e0", "#ff9800"),
                ("مرفوضين في البرنامج", total_program, "#e3f2fd", "#1976d2"),
                ("متطابقين", matched_count, "#e8f5e9", "#2e7d32")
            ]

            for label, value, bg_color, fg_color in cards_data:
                card = tk.Frame(row1, bg=bg_color, relief=tk.FLAT, width=180, height=100)
                card.pack(side=tk.LEFT, padx=10)
                card.pack_propagate(False)

                tk.Label(card, text=label, font=("Tajawal", 11), bg=bg_color, fg=fg_color).pack(pady=(15, 5))
                tk.Label(card, text=str(value), font=("Tajawal", 22, "bold"), bg=bg_color, fg=fg_color).pack()

            # الصف الثاني
            row2 = tk.Frame(stats_grid, bg="white")
            row2.pack(pady=10)

            cards_data2 = [
                ("في Excel وليسوا في البرنامج", not_in_program_count, "#ffebee", "#d32f2f"),
                ("في البرنامج وليسوا في Excel", not_in_excel_count, "#f3e5f5", "#9c27b0")
            ]

            for label, value, bg_color, fg_color in cards_data2:
                card = tk.Frame(row2, bg=bg_color, relief=tk.FLAT, width=270, height=100)
                card.pack(side=tk.LEFT, padx=10)
                card.pack_propagate(False)

                tk.Label(card, text=label, font=("Tajawal", 11), bg=bg_color, fg=fg_color).pack(pady=(15, 5))
                tk.Label(card, text=str(value), font=("Tajawal", 22, "bold"), bg=bg_color, fg=fg_color).pack()

            # التنبيه إذا كان هناك اختلاف
            if not_in_program_count > 0 or not_in_excel_count > 0:
                alert_frame = tk.Frame(summary_content, bg="#fff3e0", relief=tk.FLAT)
                alert_frame.pack(fill=tk.X, pady=15, padx=20)

                inner = tk.Frame(alert_frame, bg="#fff3e0", padx=20, pady=15)
                inner.pack()

                tk.Label(
                    inner,
                    text="⚠️ تنبيه: يوجد اختلاف في البيانات",
                    font=("Tajawal", 14, "bold"),
                    bg="#fff3e0",
                    fg="#ff9800"
                ).pack()

                if not_in_excel_count > 0:
                    tk.Label(
                        inner,
                        text=f"• يوجد {not_in_excel_count} مرفوض في البرنامج غير موجودين في ملف Excel",
                        font=("Tajawal", 12),
                        bg="#fff3e0",
                        fg="#ff9800"
                    ).pack(pady=3)

                if not_in_program_count > 0:
                    tk.Label(
                        inner,
                        text=f"• يوجد {not_in_program_count} مرفوض في Excel غير موجودين في البرنامج",
                        font=("Tajawal", 12),
                        bg="#fff3e0",
                        fg="#ff9800"
                    ).pack(pady=3)

            # عرض التفاصيل في تبويبات
            if matched_list or not_in_program or not_in_excel:
                details_card = tk.Frame(identity_tab, bg="white", relief=tk.FLAT, bd=0)
                details_card.pack(fill=tk.BOTH, expand=True, pady=15, padx=20)

                details_content = tk.Frame(details_card, bg="white", padx=30, pady=25)
                details_content.pack(fill=tk.BOTH, expand=True)

                notebook = ttk.Notebook(details_content)
                notebook.pack(fill=tk.BOTH, expand=True)

                # تبويب المتطابقين
                if matched_list:
                    matched_tab = tk.Frame(notebook, bg="white")
                    notebook.add(matched_tab, text=f"المتطابقين ({len(matched_list)})")

                    # جدول المتطابقين
                    matched_tree_frame = tk.Frame(matched_tab, bg="white")
                    matched_tree_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

                    columns = ("رقم الهوية", "الاسم", "حالة Excel", "حالة البرنامج")
                    matched_tree = ttk.Treeview(matched_tree_frame, columns=columns, show="headings", height=15)

                    matched_tree.column("رقم الهوية", width=150, anchor="center")
                    matched_tree.column("الاسم", width=250, anchor="center")
                    matched_tree.column("حالة Excel", width=150, anchor="center")
                    matched_tree.column("حالة البرنامج", width=150, anchor="center")

                    for col in columns:
                        matched_tree.heading(col, text=col)

                    matched_tree.tag_configure('matched', background='#e8f5e9')

                    for item in matched_list:
                        matched_tree.insert("", tk.END, values=(
                            item['national_id'],
                            item['name'],
                            item['excel_status'],
                            item['program_status']
                        ), tags=('matched',))

                    scrollbar = ttk.Scrollbar(matched_tree_frame, orient="vertical", command=matched_tree.yview)
                    matched_tree.configure(yscrollcommand=scrollbar.set)
                    matched_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
                    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

                # تبويب غير الموجودين في البرنامج
                if not_in_program:
                    not_in_prog_tab = tk.Frame(notebook, bg="white")
                    notebook.add(not_in_prog_tab, text=f"في Excel فقط ({len(not_in_program)})")

                    # جدول
                    prog_tree_frame = tk.Frame(not_in_prog_tab, bg="white")
                    prog_tree_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

                    columns = ("رقم الهوية", "الاسم", "الحالة", "السبب")
                    prog_tree = ttk.Treeview(prog_tree_frame, columns=columns, show="headings", height=15)

                    prog_tree.column("رقم الهوية", width=150, anchor="center")
                    prog_tree.column("الاسم", width=250, anchor="center")
                    prog_tree.column("الحالة", width=150, anchor="center")
                    prog_tree.column("السبب", width=250, anchor="center")

                    for col in columns:
                        prog_tree.heading(col, text=col)

                    prog_tree.tag_configure('missing', background='#ffebee')

                    for item in not_in_program:
                        prog_tree.insert("", tk.END, values=(
                            item['national_id'],
                            item['name'],
                            item['status'],
                            item['reason']
                        ), tags=('missing',))

                    scrollbar = ttk.Scrollbar(prog_tree_frame, orient="vertical", command=prog_tree.yview)
                    prog_tree.configure(yscrollcommand=scrollbar.set)
                    prog_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
                    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

                # تبويب غير الموجودين في Excel
                if not_in_excel:
                    not_in_excel_tab = tk.Frame(notebook, bg="white")
                    notebook.add(not_in_excel_tab, text=f"في البرنامج فقط ({len(not_in_excel)})")

                    # جدول
                    excel_tree_frame = tk.Frame(not_in_excel_tab, bg="white")
                    excel_tree_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

                    columns = ("رقم الهوية", "الاسم", "الحالة", "السبب", "اسم الدورة")
                    excel_tree = ttk.Treeview(excel_tree_frame, columns=columns, show="headings", height=15)

                    excel_tree.column("رقم الهوية", width=130, anchor="center")
                    excel_tree.column("الاسم", width=200, anchor="center")
                    excel_tree.column("الحالة", width=120, anchor="center")
                    excel_tree.column("السبب", width=200, anchor="center")
                    excel_tree.column("اسم الدورة", width=200, anchor="center")

                    for col in columns:
                        excel_tree.heading(col, text=col)

                    excel_tree.tag_configure('missing', background='#f3e5f5')

                    for item in not_in_excel:
                        excel_tree.insert("", tk.END, values=(
                            item['national_id'],
                            item['name'],
                            item['status'],
                            item['reason'] if item['reason'] else '',
                            item['course_name']
                        ), tags=('missing',))

                    scrollbar = ttk.Scrollbar(excel_tree_frame, orient="vertical", command=excel_tree.yview)
                    excel_tree.configure(yscrollcommand=scrollbar.set)
                    excel_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
                    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        # أزرار الاستيراد
        import_identity_btn = tk.Button(
            buttons_identity_frame,
            text="📂 استيراد ملف Excel",
            font=("Tajawal", 12, "bold"),
            bg="#1a237e",
            fg="white",
            padx=30,
            pady=12,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=import_identity_file
        )
        import_identity_btn.pack(side=tk.RIGHT, padx=8)

        template_identity_btn = tk.Button(
            buttons_identity_frame,
            text="📄 تحميل قالب فارغ",
            font=("Tajawal", 12, "bold"),
            bg="#607d8b",
            fg="white",
            padx=30,
            pady=12,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=download_identity_template
        )
        template_identity_btn.pack(side=tk.RIGHT, padx=8)

        validate_identity_btn = tk.Button(
            buttons_identity_frame,
            text="✓ بدء المصادقة",
            font=("Tajawal", 12, "bold"),
            bg="#9e9e9e",
            fg="white",
            padx=30,
            pady=12,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=perform_identity_validation,
            state=tk.DISABLED
        )
        validate_identity_btn.pack(side=tk.RIGHT, padx=8)

        import_identity_info = tk.Label(
            import_identity_content,
            text="لم يتم استيراد أي ملف بعد",
            font=("Tajawal", 11),
            bg="white",
            fg="#9e9e9e"
        )
        import_identity_info.pack(pady=(20, 0))

        # وضع Canvas والشريط
        main_canvas.pack(side="left", fill="both", expand=True)
        main_scrollbar_y.pack(side="right", fill="y")

        # شريط الحالة
        status_bar = tk.Frame(audit_window, bg="#263238", height=40)
        status_bar.pack(side=tk.BOTTOM, fill=tk.X)
        status_bar.pack_propagate(False)

        tk.Label(
            status_bar,
            text="نظام التدقيق والمصادقة - جاهز",
            font=("Tajawal", 11),
            bg="#263238",
            fg="white"
        ).pack(expand=True)

    def _create_programs_tables(self):
        """إنشاء جداول البرامج في قاعدة البيانات"""
        try:
            with self.db_conn:
                # جدول البرامج
                self.db_conn.execute("""
                    CREATE TABLE IF NOT EXISTS programs (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        program_name TEXT NOT NULL,
                        program_description TEXT,
                        created_date TEXT,
                        created_by TEXT
                    )
                """)

                # جدول ربط البرامج بالدورات
                self.db_conn.execute("""
                    CREATE TABLE IF NOT EXISTS program_courses (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        program_id INTEGER,
                        course_id INTEGER,
                        FOREIGN KEY (program_id) REFERENCES programs(id),
                        FOREIGN KEY (course_id) REFERENCES courses(id)
                    )
                """)

                self.db_conn.commit()
        except Exception as e:
            print(f"خطأ في إنشاء جداول البرامج: {e}")
